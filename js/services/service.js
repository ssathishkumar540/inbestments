!function () { "use strict"; var __ProductTourService = function ($q, $http) { return { fetchSteps: function () { var d = $q.defer(); return $http.get("product-tour").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, fetchTooltip: function () { var d = $q.defer(); return $http.get("tool-tip").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, fetchInfo: function (info) { var d = $q.defer(); return $http.get("info/" + info + ".htm").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, checkInfoList: function () { var d = $q.defer(), finalArray = []; return $http.post("available-info-list").success(function (res) { if (res.success) for (var i = 0; i < res.data.length; i++)finalArray.push(res.data[i].replace(".htm", "")); d.resolve(finalArray) }).error(function (reason) { d.reject(reason) }), d.promise } } }; __ProductTourService.$inject = ["$q", "$http"], appService.service("ProductTour", __ProductTourService) }(), function () { "use strict"; var __GeneralService = function ($q, $http) { return { subscribe: function (data) { var d = $q.defer(); return $http.post("/api/general/subscribe", data).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, contactUs: function (data) { var d = $q.defer(); return $http.post("/api/general/contactus", data).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getHotDeals: function () { var d = $q.defer(); return $http.get("/hot-deals").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getIsCampaign: function () { var d = $q.defer(); return $http.get("/is-campaign").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, propertyManagement: function (data) { var d = $q.defer(); return $http.post("/api/general/propertymanagement", data).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getAgentSearchPerformed: function (data) { data = { user_id: data }; var d = $q.defer(); return $http.post("/api/general/get-agent-search-performed", data).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getBuyerSearchPerformed: function (data) { data = { user_id: data }; var d = $q.defer(); return $http.post("/api/general/get-buyer-search-performed", data).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getInviteCount: function () { var d = $q.defer(); return $http.get("/api/general/get-invite-count").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getTooltipData: function () { var d = $q.defer(); return $http.get("/js/app/tooltipjson/tooltip.json").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getCouponByGuid: function (guid) { const d = $q.defer(); return $http.get("api/general/coupon-by-guid/" + guid).success(d.resolve).error(d.reject), d.promise } } }, __CookieService = function ($cookies) { return { set: function (key, value) { $cookies.put(key, value) }, setObject: function (key, value) { $cookies.putObject(key, value) }, getAll: function () { return $cookies.getAll() }, get: function (key) { return $cookies.get(key) }, getObject: function (key, value) { return $cookies.getObject(key) }, destroy: function (key) { return $cookies.remove(key) } } }, __ResourceService = function ($q, $http, Rest, $location) { return { getMortageTypes: function () { var d = $q.defer(); return $http.get("api/resources/mortage-types").success(function (data) { d.resolve(data.mTypes) }).error(function (reason) { d.reject(reason) }), d.promise }, getDropdowns: function () { var d = $q.defer(); return $http.get("api/resources/dropdown-list").success(function (data) { d.resolve(data.dList) }).error(function (reason) { d.reject(reason) }), d.promise }, getPropertyAVM: function (property_id) { var d = $q.defer(); return $http.post("api/resources/propertyavm", { pid: property_id }).success(function (data) { d.resolve(data.mTypes) }).error(function (reason) { d.reject(reason) }), d.promise }, userProperty: function (propertyID, publicLinkId) { var utmparams = $location.search(), dataObj = { pid: propertyID }; !utmparams || "PublicLongLink" !== utmparams.utm_content && "PublicShortLink" !== utmparams.utm_content || (dataObj.publicLinkId = publicLinkId); var d = $q.defer(); return $http.post("api/property/user-property", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getCountyList: function () { var d = $q.defer(); return $http.get("api/resources/county-list").success(function (data) { d.resolve(data.countyList) }).error(function (reason) { d.reject(reason) }), d.promise }, getPropertyTypes: function () { var d = $q.defer(); return $http.get("api/resources/property-types").success(function (data) { d.resolve(data.propTypes) }).error(function (reason) { d.reject(reason) }), d.promise }, getPropStatusList: function () { var d = $q.defer(); return $http.get("api/resources/property-status-list").success(function (data) { d.resolve(data.statusList) }).error(function (reason) { d.reject(reason) }), d.promise }, getCityZipCodes: function (queryString) { var d = $q.defer(); return $http.get("api/resources/city-zipcode/?q=" + queryString).success(function (data) { d.resolve(data.cityList) }).error(function (reason) { d.reject(reason) }), d.promise }, getSchoolDistricts: function (queryString) { var d = $q.defer(); return $http.get("api/resources/get-school-district/?q=" + queryString).success(function (data) { d.resolve(data.schoolDistList) }).error(function (reason) { d.reject(reason) }), d.promise }, getCommunities: function (queryString) { var d = $q.defer(); return $http.get("api/resources/get-communities/?q=" + queryString).success(function (data) { d.resolve(data.communityList) }).error(function (reason) { d.reject(reason) }), d.promise }, getConfig: function () { var d = $q.defer(); return $http.get("api/resources/settings").success(function (data) { d.resolve(data.settings) }).error(function (reason) { d.reject(reason) }), d.promise }, getImages: function (propid) { var d = $q.defer(); return $http.post("api/property/get-images", { pid: propid }).success(function (data) { d.resolve(data.imageList) }).error(function (reason) { d.reject(reason) }), d.promise }, getAgentInfo: function (listid) { var d = $q.defer(); return $http.post("api/property/getagentinfo", { listid: listid }).success(function (data) { d.resolve(data.agentInfo) }).error(function (reason) { d.reject(reason) }), d.promise }, propertyHistory: function (dataObj) { var d = $q.defer(); return $http.post("api/property/get-property-history", dataObj).success(function (data) { d.resolve(data.propertyHistory) }).error(function (reason) { d.reject(reason) }), d.promise }, getSingleAgentInfo: function (id, is_publicLink) { var d = $q.defer(); return $http.post("api/resources/get-single-agent-info", { agent_user_id: id, publicLink: is_publicLink }).success(function (data) { d.resolve(data.singleAgentInfo[0]) }).error(function (reason) { d.reject(reason) }), d.promise }, getAgentRecentSales: function (id) { var d = $q.defer(); return $http.post("api/resources/get-recent-sales", { agent_id: id }).success(function (data) { d.resolve(data.agentRecentSales[0]["count(id)"]) }).error(function (reason) { d.reject(reason) }), d.promise }, propertyLastChecked: function (scriptName) { var d = $q.defer(); return $http.post("api/resources/property-last-checked", { scriptName: scriptName }).success(function (data) { d.resolve(data.lastChecked) }).error(function (reason) { d.reject(reason) }), d.promise }, getInvestorInsightsContribution: function (id) { var d = $q.defer(); return $http.post("api/resources/get-investor-insights-contributed").success(function (data) { data.investorContribution ? d.resolve(data.investorContribution[0]["count(id)"]) : d.resolve(0) }).error(function (reason) { d.reject(reason) }), d.promise }, getRecentSearches: function (user_id) { var d = $q.defer(); return $http.get("api/search/get-recent-searches").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getBRule: function (property_type) { return Rest.all("api/resources/b-rule").post({ ptype: property_type }) }, getCompAttr: function () { var d = $q.defer(); return $http.get("/api/property/comp-attr").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getRentalCompAttr: function () { var d = $q.defer(); return $http.get("/api/property/rental_comp-attr").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getUserRole: function (user_id) { var d = $q.defer(); return $http.post("/api/resources/get-user-role", { user_id: user_id }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, lenderPartner: function (code) { var d = $q.defer(); return $http.post("/api/resources/get-lender-partner-details", { code: code }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, sendLenderContactEmail: function (dataObj) { var d = $q.defer(); return $http.post("/api/resources/send-lender-details", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getInsightsDropdowns: function () { var d = $q.defer(); return $http.get("api/resources/insights-dropdown-list").success(function (data) { d.resolve(data.dList) }).error(function (reason) { d.reject(reason) }), d.promise }, getInsightsMortageTypes: function () { var d = $q.defer(); return $http.get("api/resources/insights-mortage-types").success(function (data) { d.resolve(data.mTypes) }).error(function (reason) { d.reject(reason) }), d.promise }, isUserUpdateMortgage: function (data) { var d = $q.defer(); return $http.post("/api/general/userUpdateMortgage", data).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getQuestionaires: function () { var d = $q.defer(); return $http.get("api/resources/getQuestionaires").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, updatePrimaryHomeOwner: function (dataObj) { var d = $q.defer(); return $http.post("api/resources/updatePrimaryHomeOwner", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, hidePHOPopup: function () { var d = $q.defer(); return $http.post("api/resources/hidePHOPopup").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getDefaultRequiredRate: function () { var d = $q.defer(); return $http.get("api/resources/getDefaultRequiredRate").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getDefaultLenderDetails: function () { var d = $q.defer(); return $http.get("api/resources/getInsightsDefaultLenderDetails").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getInsightPageSectionList: function (page_url) { var d = $q.defer(); return $http.post("api/smartportfoliosystem/get-all-sections-list", { page_url: page_url }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getInsightReportPrimaryOwner: function (userInfo) { var d = $q.defer(); return $http.post("/api/general/get-insights-report-primary-owner", userInfo).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getDefaultAgentDetails: function () { var d = $q.defer(); return $http.get("api/resources/getInsightsDefaultAgentDetails").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getPropertyMortageTypes: function () { var d = $q.defer(); return $http.get("api/resources/property-mortage-types").success(function (data) { d.resolve(data.mTypes) }).error(function (reason) { d.reject(reason) }), d.promise } } }; __GeneralService.$inject = ["$q", "$http"], __CookieService.$inject = ["$cookies"], __ResourceService.$inject = ["$q", "$http", "Restangular", "$location"], appService.service("GeneralService", __GeneralService), appService.service("CookieService", __CookieService), appService.service("ResourceService", __ResourceService) }(), function () { "use strict"; var __UserFactory = function ($sce) { var q1, userObj = new Object; function UserClass() { q1 = this } return UserClass.prototype._setUser = function (dataObj) { userObj = dataObj }, UserClass.prototype._getUser = function () { return angular.equals({}, userObj) ? null : userObj }, UserClass.prototype._isLogin = function () { return !!userObj.userID }, UserClass.prototype._isGuest = function () { return !userObj.userID }, UserClass.prototype._isAdmin = function () { return !!userObj.isAdmin }, UserClass.prototype._isLender = function () { return !!userObj.isLender }, UserClass.prototype._isOtherRole = function () { return !!userObj.isOtherRole }, UserClass.prototype._isAgent = function () { return !!userObj.isAgent }, UserClass.prototype._subDays = function () { return void 0 != userObj.subDays ? userObj.subDays : 0 }, UserClass.prototype._isLtd = function () { return !!userObj.isLimited }, UserClass.prototype._isLimited = function () { return !!userObj.isLimited }, UserClass.prototype._getNotification = function (tkey, tObj) { if (angular.equals({}, userObj) && angular.equals({}, userObj.sysConfig)) return null; var anchorLink = "<a "; for (var k in tObj) tObj.hasOwnProperty(k) && (anchorLink += k + '="' + tObj[k] + '" '); anchorLink += ">"; var linkText = userObj.sysConfig[tkey].replace("##Slink##", anchorLink).replace("##Elink##", "</a>").replace("##num##", q1._subDays()); return $sce.trustAsHtml(linkText) }, UserClass }, __UserService = function ($q, $http, Restangular, AuthService, $location) { var agent_specialties = null; return { loginNew: function (dataObj, cb) { $q.defer(), $http.post("loginNew", dataObj).success(function (data) { cb(data) }).error(function (reason) { cb(reason) }) }, myListing: void 0, login: function (data, cb) { Restangular.all("login").post(data).then(function (result) { AuthService._set("_userID", result.userData.userID), AuthService._setObject("_UserInfo", result.userData), cb(result) }, function (result) { cb(result) }) }, logOut: function (cb) { Restangular.all("logout").post().then(function (result) { if (AuthService._removeAll(), "undefined" == typeof GoogleAuth) cb(result); else { if (GoogleAuth) try { GoogleAuth.signOut() } catch (e) { console.error(e) } cb(result) } }, function (result) { cb(result) }) }, isAuthenticated: function () { var deferred = $q.defer(); return $http.get("/api/account/loggedin").success(function (res) { res.success ? deferred.resolve(res) : (AuthService._removeAll(), deferred.resolve(res)) }), deferred.promise }, getCookUser: function () { return AuthService._getObject("_UserInfo") }, register: function (data) { var d = $q.defer(); return $http.post("/api/account/create", data).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, referralDetails: function (referralCode, cb) { Restangular.all("api/account/referral-details").post({ referral_code: referralCode }).then(function (result) { cb(result) }, function (result) { cb(result) }) }, updateFirstAndLastName: function (data) { var d = $q.defer(); return $http.post("/api/account/first-and-last-name", data).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, updateUserBasicDetails: function (data) { var d = $q.defer(); return $http.post("/api/account/update-user-basic-details", data).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, setPassword: function (data) { var d = $q.defer(); return $http.post("/api/account/set-password", data).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, registerAgent: function (data) { var d = $q.defer(); return $http.post("/api/account/agent/create", data).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, emailReferral: function (emails, userId, url, inviteType, cb) { Restangular.all("api/account/email-referral").post({ email_id: emails, ref_url: url, user_id: userId, invite_type: inviteType }).then(function (result) { cb(result) }, function (result) { cb(result) }) }, forgotPassword: function (data, cb) { Restangular.all("api/account/forgot").post(data).then(function (result) { cb(result) }, function (result) { cb(result) }) }, updatePassword: function (data, cb) { Restangular.all("api/account/update-password").post(data).then(function (result) { cb(result) }, function (result) { cb(result) }) }, resetTokenCheck: function (token) { return Restangular.all("api/account/rtokencheck").post({ tokenID: token }) }, changePassword: function (data, cb) { Restangular.all("api/user/change-pass").post(data).then(function (result) { cb(result) }, function (result) { cb(result) }) }, updateProfile: function (dataObj, cb) { Restangular.all("api/user/update-profile").post(dataObj).then(function (result) { cb(result) }, function (result) { cb(result) }) }, updateAgentProfile: function (dataObj, cb) { Restangular.all("api/user/update-agent-profile").post(dataObj).then(function (result) { cb(result) }, function (result) { cb(result) }) }, updateLenderProfile: function (dataObj, cb) { Restangular.all("api/user/update-lender-profile").post(dataObj).then(function (result) { cb(result) }, function (result) { cb(result) }) }, getLenderDisclaimer: function (user_id) { var d = $q.defer(); return $http.post("api/user/get-lender-disclaimer", { user_id: user_id }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, updateAgentMoreAbout: function (dataObj, cb) { Restangular.all("api/user/update-agent-more-about").post(dataObj).then(function (result) { cb(result) }, function (result) { cb(result) }) }, updateAgentProfessionalDetails: function (dataObj, cb) { Restangular.all("api/user/update-agent-prof-details").post(dataObj).then(function (result) { cb(result) }, function (result) { cb(result) }) }, updateAgentReviewDetails: function (dataObj, cb) { Restangular.all("api/user/update-agent-review-details").post(dataObj).then(function (result) { cb(result) }, function (result) { cb(result) }) }, updateLenderMoreAbout: function (dataObj, cb) { Restangular.all("api/user/update-lender-more-about").post(dataObj).then(function (result) { cb(result) }, function (result) { cb(result) }) }, updateLenderProfessionalDetails: function (dataObj, cb) { Restangular.all("api/user/update-lender-prof-details").post(dataObj).then(function (result) { cb(result) }, function (result) { cb(result) }) }, updateLenderReviewDetails: function (dataObj, cb) { Restangular.all("api/user/update-lender-review-details").post(dataObj).then(function (result) { cb(result) }, function (result) { cb(result) }) }, updateAgentTeamName: function (dataObj, cb) { Restangular.all("api/user/update-agent-team-name").post(dataObj).then(function (result) { cb(result) }, function (result) { cb(result) }) }, addAgentTeamMember: function (dataObj, cb) { Restangular.all("api/user/add-agent-team-member").post(dataObj).then(function (result) { cb(result) }, function (result) { cb(result) }) }, removeAgentTeamMember: function (dataObj, cb) { Restangular.all("api/user/remove-agent-team-member").post(dataObj).then(function (result) { cb(result) }, function (result) { cb(result) }) }, isInCollection: function (dataObj, cb) { Restangular.all("api/account/is-in-collection").post(dataObj).then(function (result) { cb(result) }, function (result) { cb(result) }) }, setCollection: function (dataObj, cb) { Restangular.all("api/account/set-collection").post(dataObj).then(function (result) { cb(result) }, function (result) { cb(result) }) }, getNoOfReference: function (agent_id, cb) { Restangular.all("api/user/get-no-of-reference").post({ agent_id: agent_id }).then(function (result) { cb(result) }, function (result) { cb(result) }) }, unsubscribe: function (subscription_for, user_id) { return Restangular.all("api/account/un-subscribe").post({ subscribed_for: subscription_for, user_id: user_id }) }, emailVerify: function (email, token) { return Restangular.all("api/account/email-verify").post({ email_id: email, tokenID: token }) }, reSendVerificationEmail: function (data) { var d = $q.defer(); return $http.post("/api/account/resend-verification-email", data).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, sendVerificationOtpEmail: function (data) { var d = $q.defer(); return $http.post("/api/account/send-verification-otp-email", data).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getFavourites: function () { var d = $q.defer(); return $http.get("api/property/my-favourites").success(function (data) { d.resolve(data.favourites) }).error(function (reason) { d.reject(reason) }), d.promise }, showDialog: function () { var deferred = $q.defer(); return $http.get("/api/account/update-popup").success(function (res) { res.success, deferred.resolve(res) }), deferred.promise }, getSearchHistory: function () { var d = $q.defer(); return $http.get("api/search/search-history").success(function (data) { d.resolve(data.searchList) }).error(function (reason) { d.reject(reason) }), d.promise }, isPBAuthenticated: function () { var deferred = $q.defer(); return $http.get("/api/account/loggedin").success(function (res) { res.success, deferred.resolve(res) }), deferred.promise }, getUserById: function (id) { var d = $q.defer(); return $http.post("api/user/get-user-by-id", { user_id: id }).success(function (data) { if (null !== data.userDetails) var userInfo = { is_admin: data.userDetails.is_admin, name: data.userDetails.name, userDetails: data.userDetails }; d.resolve(userInfo) }).error(function (reason) { d.reject(reason) }), d.promise }, getUserByEmail: function (user) { var d = $q.defer(); return $http.post("/api/user/get-user-by-email", { user_email: user.username }).success(function (data) { if (null !== data.userDetails) var userInfo = { data: data = { is_admin: data.userDetails.is_admin, userID: data.userDetails.id, mobileNo: data.userDetails.mobile_number, mobileVerified: data.userDetails.mobile_verified, isAgent: data.userDetails.is_agent }, success: !0 }; d.resolve(userInfo) }).error(function (reason) { d.reject(reason) }), d.promise }, fetchByMls: function (id, cb) { $http.post("/api/account/get-agent-details", { id: id }).success(function (res) { cb(res) }) }, fetchBasicAgentDetails: function (id, flag, cb) { $http.post("/api/account/agent-basic-details", { id: id, flag: flag }).success(function (res) { cb(res) }).error(function (e) { cb(e) }) }, fetchBasicLenderDetails: function (id, flag, cb) { $http.post("/api/account/lender-basic-details", { id: id, flag: flag }).success(function (res) { cb(res) }) }, fetchAdditionalAgentDetails: function (id, flag, cb) { $http.post("/api/account/agent-advanced-details", { id: id, flag: flag }).success(function (res) { cb(res) }) }, fetchAdditionalLenderDetails: function (id, flag, cb) { $http.post("/api/account/lender-advanced-details", { id: id, flag: flag }).success(function (res) { cb(res) }) }, fetchAgentSpecialties: function (cb) { null == agent_specialties ? $http.post("/agent-specialties", {}).success(function (res) { agent_specialties = res, cb(res) }) : cb(agent_specialties) }, fetchAgentRoles: function (cb) { $http.post("/agent-role", {}).success(function (res) { cb(res) }) }, getLatestAgentSales: function (ml_number, cb) { Restangular.all("api/account/agent-recent-sale").post({ ml_number: ml_number }).then(function (result) { cb(result) }, function (result) { cb(result) }) }, getZillowReview: function (dataObj, cb) { Restangular.all("api/account/get-zillow-review").post(dataObj).then(function (result) { cb(result) }, function (result) { cb(result) }) }, checkAgentTeamMember: function (dataObj, cb) { Restangular.all("api/user/check-agent").post(dataObj).then(function (result) { cb(result) }, function (result) { cb(result) }) }, fetchCities: function (cb) { $http.post("/get-cities", {}).success(function (res) { cb(res) }) }, fetchUserImg: function (id, cb) { $http.post("/api/account/get-user-img", { id: id }).success(function (res) { cb(res) }) }, updateUserImg: function (dataObj, cb) { $http.post("/api/user/update-user-img", dataObj).success(function (res) { cb(res) }) }, getHiddenProperties: function () { var d = $q.defer(); return $http.get("api/user/get-user-hidden-properties").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, unhideProperty: function (id) { var d = $q.defer(); return $http.post("api/user/unhide-property", { prop_id: id }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, saveInviteDetails: function (details) { var d = $q.defer(); return $http.post("api/user/save-invite-details", details).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, hideInvite: function () { var d = $q.defer(); return $http.get("api/user/hide-invite").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getShareUrls: function (cb) { $http.get("/api/account/get-share-urls").success(function (res) { cb(res) }) }, hideLaunchpad: function () { var d = $q.defer(); return $http.post("api/user/hide-launchpad").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, hideLaunchpadBtn: function () { var d = $q.defer(); return $http.post("api/user/hide-launchpad-btn").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, launchpadMissionProfile: function () { var d = $q.defer(); return $http.post("api/user/launch-mission-profile").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getAgentSpecialities: function (dataObj) { var d = $q.defer(); return $http.post("api/user/get-agent-specialities", { specialties: dataObj }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, validateMission: function (dataObj) { var d = $q.defer(); return $http.post("api/user/validate-mission", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, saveMission: function (dataObj) { var d = $q.defer(); return $http.post("api/user/save-user-missions", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getUserMission: function () { var d = $q.defer(); return $http.get("api/user/get-user-missions").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, lastUrl: function (inputUrl) { return this.url = inputUrl || this.url, this.url }, getAgentListingId: function (dataObj) { var d = $q.defer(); return $http.post("api/resources/getlaid", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getMissionTaskDetails: function (dataObj) { var d = $q.defer(); return $http.post("api/user/get-mission-details", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, extendBuyerTrialDays: function (data) { var d = $q.defer(); return $http.post("/api/account/extend-buyer-trial-days", data).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, extendBuyerTrialByInviteAgents: function (data) { var d = $q.defer(); return $http.post("/api/account/extend-buyer-trial-by-invite-agents", data).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getAgentsInviteCount: function (data) { var d = $q.defer(); return $http.post("/api/account/get-agents-invite-count", data).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getMvpUser: function () { var d = $q.defer(); return $http.get("/api/account/get-mvp-user").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getEmailVerified: function (email_id) { var d = $q.defer(); return $http.post("/api/account/get-email-verified", { email_id: email_id }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getMobileVerified: function (mobile, userID = null) { var d = $q.defer(); return $http.post("/api/account/get-mobile-verified", { mobile: mobile, userID: userID }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getMobileVerifiedByUser: function (mobile, userID = null) { var d = $q.defer(); return $http.post("/api/account/get-mobile-verified-by-user", { mobile: mobile, userID: userID }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getEmailVerifiedByUser: function (email, userID = null) { var d = $q.defer(); return $http.post("/api/account/get-email-verified-by-user", { email: email, userID: userID }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, sendOtp: function (otp) { var d = $q.defer(); return $http.post("/api/message/send-otp", { otp: otp }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, verifyOtp: function (otpData) { var d = $q.defer(); return $http.post("/api/message/verify-otp", { otpData: otpData }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, verifyOtpReg: function (otpData) { var d = $q.defer(); return $http.post("/api/message/verify-otp-register", { otpData: otpData }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, verifyOtpEmailUp: function (otpData) { var d = $q.defer(); return $http.post("/api/message/verify-otp-email-up", { otpData: otpData }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, isUniqueIp: function (ipData) { var d = $q.defer(); return $http.post("/api/user/is-unique-ip", { ipData: ipData }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getUserLoginCount: function (userData) { var d = $q.defer(); return $http.post("/api/user/user-login-count", { userData: userData }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, updateUserMobile: function (userData) { var d = $q.defer(); return $http.post("/api/user/update-user-mobile", { userData: userData }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, updateUserMobileVerified: function (userData) { var d = $q.defer(); return $http.post("/api/user/update-user-mobile-verified", { userData: userData }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, checkUserExist: function (email) { var d = $q.defer(); return $http.post("/api/user/checkUserExist", { email_address: email }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, singleFlowRegister: function (userObj) { var d = $q.defer(); return $http.post("/api/account/single-flow-register", userObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, userExtraInformationUpdate: function (dataObj, cb) { var d = $q.defer(); return $http.post("/api/user/update-user-details", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise } } }, __SessionService = function ($cookies) { return { _get: function (key) { var reqKey = $cookies.get(key); return !angular.isUndefined(reqKey) && reqKey }, _getObject: function (key) { return $cookies.getObject(key) }, _getAll: function () { return $cookies.getAll() }, _set: function (key, value) { $cookies.put(key, value) }, _setObject: function (key, value) { $cookies.putObject(key, value) }, _remove: function (key) { $cookies.remove(key) }, _removeAll: function () { var cookies = $cookies.getAll(); angular.forEach(cookies, function (v, k) { "conversationalSearchCount" !== k && "pricingUTMData" !== k && $cookies.remove(k) }) }, _setWithExpireTime: function (key, value, days) { var expireDate = new Date; expireDate.setDate(expireDate.getDate() + days), $cookies.put(key, value, { expires: expireDate }) }, _setObjectWithExpireTime: function (key, value, days) { var expireDate = new Date; expireDate.setDate(expireDate.getDate() + days), $cookies.putObject(key, value, { expires: expireDate }) } } }; __UserFactory.$inject = ["$sce"], __SessionService.$inject = ["$cookies"], __UserService.$inject = ["$q", "$http", "Restangular", "AuthService", "$location"], appService.factory("UserFac", __UserFactory), appService.factory("ConfigFac", function () { var q1; function Config(_options) { (q1 = this).options = _options } return Config.prototype.getOption = function (option_name) { for (var i = 0; i < q1.options.length; i++)if (q1.options[i].option_name == option_name) return q1.options[i].option_value }, Config }), appService.service("AuthService", __SessionService), appService.service("UserService", __UserService) }(), function () { "use strict"; function AgentService($q, $http, Restangular) { return { getAgentsTopServiceArea: function (params) { var d = $q.defer(); return $http.post("/api/agent/agents-top-service-area", params).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getAgentsByCity: function (params) { var d = $q.defer(); return $http.post("/api/agent/get-agents-by-city", params).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, contactAgent: function (data, cb) { Restangular.all("api/agent/contact").post(data).then(function (result) { cb(result) }, function (result) { cb(result) }) }, logAgentProfileAccess: function (params) { var d = $q.defer(); return $http.post("/api/agent/log-agent-profile-access", params).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, fetchAgentListing: function (id, cb) { $http.post("/api/agent/agent-listing", { id: id }).success(function (res) { cb(res) }) } } } appService.service("AgentService", AgentService), AgentService.$inject = ["$q", "$http", "Restangular"] }(), function () { "use strict"; var __PropertyFactory = function ($filter, UserFac, $window, $sessionStorage) { var q1, pCtrl = null, pMls = null, pCust = null, bRule = null; function Property(vmScope) { q1 = this, pCtrl = vmScope, pMls = vmScope.pP, pCust = pMls.pCust, bRule = pMls.bRule, q1._initVars() } return Property.prototype.getFakeString = function () { return "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum." }, Property.prototype.getRandomInt = function (min, max) { return Math.floor(Math.random() * (max - min + 1)) + min }, Property.prototype.openProp = function (propID) { $window.open("/#!/property/" + propID) }, Property.prototype._convert = function (val) { return parseFloat(val || 0) }, Property.prototype._defSet = function (key, obj) { return "pMls" == obj ? !pMls._isUserPExists && _.isNull(pCust[key]) ? pCust[key] = pMls[key] : pCust[key] : !pMls._isUserPExists && _.isNull(pCust[key]) ? pCust[key] = bRule[key] : pCust[key] }, Property.prototype._initVars = function () { if (pCust.property_tax = $filter("number")(q1.monthlyTax(), 2), pCust.association_fees = q1._defSet("association_fees", "pMls"), pCust.default_down_payment = q1._defSet("default_down_payment", "bRule"), pCust.default_vacancy = q1._defSet("default_vacancy", "bRule"), pCust.rent_high = q1.getMonthlyRent(), void 0 !== $sessionStorage.searchObj) { var funding = $sessionStorage.searchObj.funding; "allcash" != funding && "sdira" != funding || (pCust.default_down_payment = 100) } !pMls._isUserPExists && _.isNull(pCust.holding_period) && (pCust.holding_period = bRule.holding_period_value), 1 == pCust.deal_type ? pCust.deal_type_hold = pCust.deal_type : 2 == pCust.deal_type ? pCust.deal_type_flip = pCust.deal_type : 3 == pCust.deal_type && (pCust.deal_type_hold = 1, pCust.deal_type_flip = 2) }, Property.prototype.getListPrice = function () { return pMls.list_price }, Property.prototype.getSalePrice = function () { return q1._convert(pCust.estimated_sale_price) }, Property.prototype.getOffPrice = function (_tab) { return "h" == _tab ? q1._convert(pCust.offer_price_hold) : "f" == _tab ? q1._convert(pCust.offer_price_flip) : void 0 }, Property.prototype.getUserDType = function () { return pCust.deal_type_hold = void 0 == pCust.deal_type_hold ? 0 : pCust.deal_type_hold, pCust.deal_type_flip = void 0 == pCust.deal_type_flip ? 0 : pCust.deal_type_flip, 0 == pCust.deal_type_hold && 0 == pCust.deal_type_flip ? "0" : 0 == pCust.deal_type_hold && 2 == pCust.deal_type_flip ? "2" : 1 == pCust.deal_type_hold && 0 == pCust.deal_type_flip ? "1" : "3" }, Property.prototype.getMonthlyRent = function () { return _.isNull(pCust.monthly_rent) || "0.00" == pCust.monthly_rent ? 0 == bRule.monthly_rent_fk ? pCust.rent_high = pCust.rent_low : 1 == bRule.monthly_rent_fk && (pCust.rent_high = pCust.median_rent) : pCust.rent_high = pCust.monthly_rent, pCust.rent_high }, Property.prototype.equityLow = function () { return pMls.pAVM.equity_low = pMls.pAVM.estimate_amount_low - q1.getListPrice(), pMls.pAVM.equity_low }, Property.prototype.equityMedian = function () { return pMls.pAVM.equity_median = pMls.pAVM.estimate_amount - q1.getListPrice(), pMls.pAVM.equity_median }, Property.prototype.equityHigh = function () { return pMls.pAVM.equity_high = pMls.pAVM.estimate_amount_high - q1.getListPrice(), pMls.pAVM.equity_high }, Property.prototype.equityLowPert = function () { return pMls.pAVM.equity_low_perc = q1.equityLow() / q1.getListPrice() * 100, pMls.pAVM.equity_low_perc }, Property.prototype.equityHighPert = function () { return pMls.pAVM.equity_high_perc = q1.equityHigh() / q1.getListPrice() * 100, pMls.pAVM.equity_high_perc }, Property.prototype.equityMedianPert = function () { return pMls.pAVM.equity_median_perc = q1.equityMedian() / q1.getListPrice() * 100, pMls.pAVM.equity_median_perc }, Property.prototype.equityOffr = function (_tab) { return "h" == _tab ? (pMls.pAVM.equity_offer_hold = pMls.pAVM.estimate_amount - q1.getOffPrice(_tab), pMls.pAVM.equity_offer_hold) : "f" == _tab ? (pMls.pAVM.equity_offer_flip = q1.getSalePrice() - q1.getListPrice(), pMls.pAVM.equity_offer_flip) : void 0 }, Property.prototype.equityOffrPert = function (_tab) { return "h" == _tab ? (pMls.pAVM.equity_offer_perc_hold = q1.equityOffr(_tab) / q1.getListPrice() * 100, pMls.pAVM.equity_offer_perc_hold) : "f" == _tab ? (pMls.pAVM.equity_offer_perc_flip = q1.equityOffr(_tab) / q1.getListPrice() * 100, pMls.pAVM.equity_offer_perc_flip) : void 0 }, Property.prototype._initDefs = function (dpType) { switch (dpType) { case "Hfix-up": pCtrl._currHfixupType = "sq", pMls._isUserPExists || !_.isNull(pCust.fixup_hold_sqtype) && pCust.fixup_hold_sqtype || (pCust.fixup_hold_sqtype = bRule.estimated_repairs_hold_sqft_value), q1.setDpMethod(dpType); break; case "Ffix-up": pCtrl._currFfixupType = "sq", pMls._isUserPExists || !_.isNull(pCust.fixup_flip_sqtype) && pCust.fixup_flip_sqtype || (pCust.fixup_flip_sqtype = bRule.estimated_repairs_flip_sqft_value), q1.setDpMethod(dpType); break; case "hc-cost": pCtrl._currCCostType = "p", pMls._isUserPExists || !_.isNull(pCust.cCost_pType) && pCust.cCost_pType || (pCust.cCost_pType = bRule.closing_cost), q1.setDpMethod(dpType); break; case "fc-cost": pCtrl._currFCCostType = "p", pMls._isUserPExists || !_.isNull(pCust.cCost_pType_flip) && pCust.cCost_pType_flip || (pCust.cCost_pType_flip = bRule.closing_cost_flip), q1.setDpMethod(dpType); break; case "s-cost": pCtrl._currSCostType = "p", pMls._isUserPExists || !_.isNull(pCust.sCost_pType) && pCust.sCost_pType || (pCust.sCost_pType = bRule.default_cost_sale), q1.setDpMethod(dpType); break; case "hacq-fee": pCtrl._currAcqFeeType = "p", pMls._isUserPExists || !_.isNull(pCust.acqCost_pType) && pCust.acqCost_pType || (pCust.acqCost_pType = bRule.acquisition_fees), q1.setDpMethod(dpType); break; case "facq-fee": pCtrl._currFAcqFeeType = "p", pMls._isUserPExists || !_.isNull(pCust.acqCost_pType_flip) && pCust.acqCost_pType_flip || (pCust.acqCost_pType_flip = bRule.acquisition_fees_flip), q1.setDpMethod(dpType); break; case "prop-mgmt-hold": pCtrl._currPropMgType = "p", pMls._isUserPExists || !_.isNull(pCust.propMgmt_pType) || pCust.propMgmt_pType || (pCust.propMgmt_pType = bRule.property_mgmt_monthly), q1.setDpMethod(dpType); break; case "h-insur": pCtrl._currInsurType = "p", pMls._isUserPExists || !_.isNull(pCust.propInsur_pType) && pCust.propInsur_pType || (pCust.propInsur_pType = bRule.default_insurance), q1.setDpMethod(dpType); break; case "f-insur": pCtrl._currFInsurType = "p", pMls._isUserPExists || !_.isNull(pCust.propInsur_pType_flip) && pCust.propInsur_pType_flip || (pCust.propInsur_pType_flip = bRule.default_insurance_flip), pCust.insurance_method_flip_fk = 8; break; case "h-maintaince": pCtrl._currHMaintType = "p", pMls._isUserPExists || !_.isNull(pCust.propMaint_pType) && pCust.propMaint_pType || (pCust.propMaint_pType = bRule.property_maintenance_monthly), q1.setDpMethod(dpType); break; case "cln-maint": pCtrl._currClnMaintType = "sq", pMls._isUserPExists || !_.isNull(pCust.cleanMaint_sqType) && pCust.cleanMaint_sqType || (pCust.cleanMaint_sqType = bRule.cleaning_maintenance_flip_value), pCust.maintenance_method_fk = 5 } }, Property.prototype.setDpMethod = function (dpType) { var resObj = new Object, _idToCheck = 0; switch (dpType) { case "Hfix-up": _idToCheck = pCust.improvement_cost_method_fk; break; case "Ffix-up": _idToCheck = pCust.improvement_cost_flip_method_fk; break; case "hc-cost": _idToCheck = pCust.closing_cost_method_fk; break; case "fc-cost": _idToCheck = pCust.closing_cost_flip_method_fk; break; case "s-cost": _idToCheck = pCust.selling_cost_method_fk; break; case "hacq-fee": _idToCheck = pCust.acquisition_fees_method_fk; break; case "facq-fee": _idToCheck = pCust.acquisition_fees_flip_method_fk; break; case "prop-mgmt-hold": _idToCheck = pCust.prop_mgmt_method_fk; break; case "h-insur": _idToCheck = pCust.insurance_method_fk; break; case "f-insur": _idToCheck = pCust.insurance_method_flip_fk; break; case "h-maintaince": _idToCheck = pCust.maintenance_method_hold_fk; break; case "cln-maint": _idToCheck = pCust.maintenance_method_fk }var _continue = !0; switch (angular.forEach(pCtrl.dpLists, function (v, k) { _continue && v.id == _idToCheck && (resObj = v, _continue = !1) }), dpType) { case "Hfix-up": pCtrl._currHfixupType = resObj.type, q1.holdFixUps(); break; case "Ffix-up": pCtrl._currFfixupType = resObj.type, q1.flipFixUps(); break; case "hc-cost": pCtrl._currCCostType = resObj.type, q1.closingCost("h"); break; case "fc-cost": pCtrl._currFCCostType = resObj.type, q1.closingCost("f"); break; case "s-cost": pCtrl._currSCostType = resObj.type, q1.sellingCost(); break; case "hacq-fee": pCtrl._currAcqFeeType = resObj.type, q1.acquisitionFee("h"); break; case "facq-fee": pCtrl._currFAcqFeeType = resObj.type, q1.acquisitionFee("f"); break; case "prop-mgmt-hold": pCtrl._currPropMgType = resObj.type, q1.propManagement(); break; case "h-insur": pCtrl._currInsurType = resObj.type, q1.propInsurance("h"); break; case "f-insur": pCtrl._currFInsurType = resObj.type, q1.propInsurance("f"); break; case "h-maintaince": pCtrl._currHMaintType = resObj.type, q1.propMaintenance(); break; case "cln-maint": pCtrl._currClnMaintType = resObj.type, q1.cleanMaintenance() } }, Property.prototype.holdFixUps = function () { return pCust.hFixMethod = pCtrl._currHfixupType, "sq" == pCtrl._currHfixupType ? pCust.estimated_repairs_hold = q1._convert(pCust.fixup_hold_sqtype) * pMls.square_foot : "fix" == pCtrl._currHfixupType && (pCust.estimated_repairs_hold = q1._convert(pCust.fixup_hold_ftype)), pCust.estimated_repairs_hold }, Property.prototype.flipFixUps = function () { return pCust.fFixMethod = pCtrl._currFfixupType, "sq" == pCtrl._currFfixupType ? pCust.estimated_repairs_flip = q1._convert(pCust.fixup_flip_sqtype) * pMls.square_foot : "fix" == pCtrl._currFfixupType && (pCust.estimated_repairs_flip = q1._convert(pCust.fixup_flip_ftype)), pCust.estimated_repairs_flip }, Property.prototype.closingCost = function (tabType) { return "h" == tabType ? (pCust.hCmethod = pCtrl._currCCostType, "p" == pCtrl._currCCostType ? pCust.closing_cost = q1.getOffPrice("h") * q1._convert(pCust.cCost_pType) / 100 : "fix" == pCtrl._currCCostType && (pCust.closing_cost = q1._convert(pCust.cCost_fType)), pCust.closing_cost) : (pCust.fCmethod = pCtrl._currFCCostType, "p" == pCtrl._currFCCostType ? pCust.closing_cost_flip = q1.getOffPrice("f") * q1._convert(pCust.cCost_pType_flip) / 100 : "fix" == pCtrl._currFCCostType && (pCust.closing_cost_flip = q1._convert(pCust.cCost_fType_flip)), pCust.closing_cost_flip) }, Property.prototype.sellingCost = function () { return pCust.sCostMethod = pCtrl._currSCostType, "p" == pCtrl._currSCostType ? pCust.cost_of_sale = q1.getSalePrice() * q1._convert(pCust.sCost_pType) / 100 : "fix" == pCtrl._currSCostType && (pCust.cost_of_sale = q1._convert(pCust.sCost_fType)), pCust.cost_of_sale }, Property.prototype.acquisitionFee = function (_tab) { return "h" == _tab ? (pCust.hAcqMethod = pCtrl._currAcqFeeType, "p" == pCtrl._currAcqFeeType ? pCust.acquisition_fee = q1.getOffPrice("h") * q1._convert(pCust.acqCost_pType) / 100 : "fix" == pCtrl._currAcqFeeType && (pCust.acquisition_fee = q1._convert(pCust.acqCost_fType)), pCust.acquisition_fee) : (pCust.fAcqMethod = pCtrl._currFAcqFeeType, "p" == pCtrl._currFAcqFeeType ? pCust.acquisition_fee_flip = q1.getOffPrice("f") * q1._convert(pCust.acqCost_pType_flip) / 100 : "fix" == pCtrl._currFAcqFeeType && (pCust.acquisition_fee_flip = q1._convert(pCust.acqCost_fType_flip)), pCust.acquisition_fee_flip) }, Property.prototype.propManagement = function () { return pCust.propMgMethod = pCtrl._currPropMgType, "p" == pCtrl._currPropMgType ? pCust.property_management = q1._convert(pCust.rent_high) * q1._convert(pCust.propMgmt_pType) / 100 : "fix" == pCtrl._currPropMgType && (pCust.property_management = q1._convert(pCust.propMgmt_fType)), pCust.property_management }, Property.prototype.cleanMaintenance = function () { return pCust.clnMaintMethod = pCtrl._currClnMaintType, "sq" == pCtrl._currClnMaintType ? pCust.maintenance_cost_flip = q1._convert(pCust.cleanMaint_sqType) * pMls.square_foot : "p" == pCtrl._currClnMaintType && (pCust.maintenance_cost_flip = q1.getOffPrice("f") * q1._convert(pCust.cleanMaint_pType) / 100), pCust.maintenance_cost_flip }, Property.prototype.propInsurance = function (_tab) { return "h" == _tab ? (pCust.hpInsurMethod = pCtrl._currInsurType, "sq" == pCtrl._currInsurType ? pCust.property_insurance = q1._convert(pCust.propInsur_sqType) * pMls.square_foot : "p" == pCtrl._currInsurType && (pCust.property_insurance = q1.getOffPrice("h") / 1e3 * q1._convert(pCust.propInsur_pType) / 12), pCust.property_insurance) : "f" == _tab ? (pCust.fpInsurMethod = pCtrl._currFInsurType, "sq" == pCtrl._currFInsurType ? pCust.property_insurance_flip = q1._convert(pCust.propInsur_sqType_flip) * pMls.square_foot : "p" == pCtrl._currFInsurType && (pCust.property_insurance_flip = q1.getOffPrice("f") / 1e3 * q1._convert(pCust.propInsur_pType_flip) / 12), pCust.property_insurance_flip) : void 0 }, Property.prototype.propMaintenance = function () { return pCust.pMaintMethod = pCtrl._currHMaintType, "p" == pCtrl._currHMaintType ? pCust.maintenance_cost_hold = q1._convert(pCust.rent_high) * q1._convert(pCust.propMaint_pType) / 100 : "fix" == pCtrl._currHMaintType && (pCust.maintenance_cost_hold = q1._convert(pCust.propMaint_fType)), pCust.maintenance_cost_hold }, Property.prototype.buyingCost = function (_tab) { var bCost; return "h" == _tab ? (bCost = q1.closingCost(_tab) + q1.acquisitionFee(_tab) + q1._convert(pCust.other_buying_cost), pCust.buying_cost = $filter("number")(bCost, 2), pCust.buying_cost_new = bCost, bCost) : (bCost = pCust.buying_cost_flip = q1.closingCost(_tab) + q1.acquisitionFee(_tab) + q1._convert(pCust.other_buying_cost_flip), pCust.buying_cost_flip = $filter("number")(bCost, 2), pCust.buying_cost_flip_new = bCost, bCost) }, Property.prototype.totIncome = function () { return q1._convert(pCust.rent_high) + q1._convert(pCust.other_income) }, Property.prototype.investNeeded = function (_tab) { return "h" == _tab ? (pCust.investment_needed = q1._convert(pCust.down_payment) + q1.buyingCost(_tab) + q1.holdFixUps(), pCust.investment_needed) : "f" == _tab ? (pCust.investment_needed_flip = q1._convert(pCust.offer_price_flip) + q1.buyingCost(_tab) + q1.flipFixUps(), pCust.investment_needed_flip) : void 0 }, Property.prototype.monthlyTax = function () { return pMls.annual_taxes / 12 }, Property.prototype.downPayment = function () { var dpPerc = q1._convert(pCust.default_down_payment); return pCust.down_payment = dpPerc * q1.getOffPrice("h") / 100, q1._convert(pCust.down_payment) }, Property.prototype.downPaymentPerc = function () { var downPerc = 100 * q1._convert(pCust.down_payment) / q1.getOffPrice("h"); return pCust.default_down_payment = downPerc.toFixed(2), pCust.default_down_payment }, Property.prototype.loanAmount = function () { return q1.getOffPrice("h") - q1._convert(pCust.down_payment) }, Property.prototype.getPMT = function (i, n, p) { return i * p * Math.pow(1 + i, n) / (1 - Math.pow(1 + i, n)) }, Property.prototype.calculatePMT = function (LoanAmount, AnnualInterestRate, totalMonths) { return q1.getPMT(AnnualInterestRate / 1200, totalMonths, -LoanAmount) }, Property.prototype.principalInt = function () { return angular.forEach(pMls.mortgageTypes, function (data) { data.id === pCust.mortgage_id && (pCust.mortgage_years = data.years) }), q1._convert(q1.calculatePMT(q1.loanAmount(), pCust.mortgage_interest, 12 * pCust.mortgage_years)) }, Property.prototype.monthlyExpenses = function () { var monthly_expenses = q1.propManagement() + q1.propInsurance("h") + q1.propMaintenance() + q1._convert(pCust.property_tax) + q1._convert(pCust.association_fees) + q1._convert(pCust.other_expense) + q1._convert(pCust.contingency); return pCust.monthly_expenses = $filter("number")(monthly_expenses, 2), monthly_expenses }, Property.prototype.totalExpenses = function () { return q1.principalInt() + q1.monthlyExpenses() }, Property.prototype.totInvestment = function (_tab) { return "h" == _tab ? q1.getOffPrice(_tab) + q1.buyingCost(_tab) + q1.holdFixUps() : q1.getOffPrice(_tab) + q1.buyingCost(_tab) + q1.flipFixUps() }, Property.prototype.monthlyCashFlow = function () { return q1.totIncome() - q1.totalExpenses() }, Property.prototype.getMortageInt = function (mortTypes) { angular.forEach(mortTypes, function (v, k) { v.id == pCust.mortgage_id && (pCust.mortgage_id = v.id, pCust.mortgage_years = v.years, pCust.mortgage_interest = v.interest, pCust.customYear = 0) }) }, Property.prototype.holdingCost = function () { var addPurchaseTotalInterest = pCust.show_purchase_loan ? q1._convert(pCust.purchase_total_interest) : 0, addRehabTotalInterest = pCust.show_rehab_loan ? q1._convert(pCust.rehab_total_interest) : 0, holding_cost_flip = q1.cleanMaintenance() + q1.propInsurance("f") + q1._convert(pCust.property_tax) + q1._convert(pCust.association_fees) + q1._convert(pCust.other_hold_cost) + addPurchaseTotalInterest + addRehabTotalInterest; return pCust.holding_cost_flip = $filter("number")(holding_cost_flip, 2), holding_cost_flip }, Property.prototype.gridHoldingCost = function (iIndex, iType) { return iIndex ? "monthly" == iType ? q1.holdingCost() : q1.holdingCost() * iIndex : "0" }, Property.prototype.calPITI = function () { return q1.monthlyTax() + q1.propInsurance("h") + q1.principalInt() }, Property.prototype.vacancyRentPert = function () { return q1._convert(pCust.default_vacancy) * q1._convert(pCust.rent_high) / 100 }, Property.prototype.cashflowVisible = function () { return q1._convert(pCust.rent_high) - (q1.calPITI() + q1.propManagement() + q1.propMaintenance() + q1._convert(pCust.association_fees)) }, Property.prototype.calCoC = function () { var coc = 12 * q1.cashflowVisible() / q1.investNeeded("h") * 100; return $filter("number")(coc, 2) }, Property.prototype.calProfit = function () { return q1.gridProfit(pCust.holding_period) }, Property.prototype.purchaseLoanPoints = function (iIndex) { var purchase_down_payment = q1._convert(pCust.offer_price_flip) * q1._convert(pCust.purchase_down_payment) / 100, purchase_principal_amount = q1._convert(pCust.offer_price_flip) - q1._convert(purchase_down_payment); return q1._convert(purchase_principal_amount) * (q1._convert(pCust.purchase_points) / 100) * (iIndex + 1) }, Property.prototype.gridProfit = function (iIndex, iType) { return iIndex ? pCust.show_purchase_loan && pCust.show_rehab_loan ? q1.getSalePrice() - (q1.getOffPrice("f") + q1.gridInitialCashInvest(iIndex) + q1.sellingCost()) : pCust.show_purchase_loan ? q1.getSalePrice() - (q1.getOffPrice("f") + q1.buyingCost("f") + q1.flipFixUps() + q1.gridHoldingCost(iIndex, "cummulate") + q1._convert(pCust.purchase_total_points) * iIndex + q1._convert(pCust.purchase_admin_fee) + q1.sellingCost()) : pCust.show_rehab_loan ? q1.getSalePrice() - (q1.getOffPrice("f") + q1.buyingCost("f") + q1.flipFixUps() + q1.holdingCost() * iIndex + pCust.rehab_total_points + pCust.rehab_admin_fee + q1.sellingCost()) : q1.getSalePrice() - (q1.getOffPrice("f") + q1.buyingCost("f") + q1.sellingCost() + q1.flipFixUps() + q1.holdingCost() * iIndex) : pCust.show_purchase_loan || pCust.show_rehab_loan ? "-" : q1.getSalePrice() - (q1.getOffPrice("f") + q1.buyingCost("f") + q1.sellingCost()) }, Property.prototype.initialCashInvest = function (_tab, addOfferPrice) { var offerPrice = addOfferPrice ? q1.getOffPrice(_tab) : 0, fixUps = pCust.show_rehab_loan && !pCust.show_purchase_loan ? 0 : q1.flipFixUps(); return offerPrice + q1.buyingCost(_tab) + fixUps }, Property.prototype.gridInitialCashInvest = function (iIndex) { var getCashIn; return getCashIn = pCust.show_purchase_loan && pCust.show_rehab_loan ? q1.initialCashInvest("f", !1) + q1.gridHoldingCost(iIndex, "cummulate") + q1._convert(pCust.purchase_total_points) + q1._convert(pCust.purchase_admin_fee) + q1._convert(pCust.rehab_total_points) + q1._convert(pCust.rehab_admin_fee) + pCust.purchase_after_down_payment + pCust.rehab_after_down_payment : pCust.show_purchase_loan ? q1.buyingCost("f") + q1.flipFixUps() + pCust.purchase_after_down_payment + q1.gridHoldingCost(iIndex, "cummulate") + q1._convert(pCust.purchase_total_points) + q1._convert(pCust.purchase_admin_fee) : pCust.show_rehab_loan ? q1.initialCashInvest("f", !0) + pCust.rehab_after_down_payment + q1.gridHoldingCost(iIndex, "cummulate") + q1._convert(pCust.rehab_total_points) + q1._convert(pCust.rehab_admin_fee) : q1.initialCashInvest("f", !0) + q1.gridHoldingCost(iIndex, "cummulate"), iIndex ? getCashIn : pCust.show_purchase_loan || pCust.show_rehab_loan ? "-" : q1.initialCashInvest("f", !0) - q1.flipFixUps() }, Property.prototype.gridReturnInvment = function (iIndex) { var ri; return ri = pCust.show_purchase_loan && pCust.show_rehab_loan ? q1.gridProfit(iIndex) / (q1.gridInitialCashInvest(iIndex) + q1.getOffPrice("f")) : q1.gridProfit(iIndex) / q1.gridInitialCashInvest(iIndex), $filter("number")(100 * ri, 2) }, Property.prototype.gridCashflow = function (iIndex, itype) { if (iIndex) { var monthlyCashFlow = q1._convert(pCust.rental_cost) - q1.holdingCost(); return "monthly" == itype ? monthlyCashFlow : monthlyCashFlow * iIndex } return "0" }, Property.prototype.netRentalYield = function () { var nry = 12 * q1.cashflowVisible() / q1.totInvestment("h") * 100; return $filter("number")(nry, 2) }, Property.prototype.grossRentalYield = function () { var nry = 12 * q1._convert(pCust.rent_high) / q1.investNeeded("h") * 100; return $filter("number")(nry, 2) }, Property.prototype.capRate = function () { var cap_rate = 12 * q1._convert(pCust.net_operating_income) / (q1._convert(pCust.offer_price_hold) + q1._convert(pCust.estimated_repairs_hold)) * 100; return $filter("number")(cap_rate, 2) }, Property.prototype.calcROI = function () { var roi = q1.calProfit() / q1.investNeeded("f") * 100; return $filter("number")(roi, 2) }, Property.prototype.calcOfferPriceHoldPerc = function () { return pCust.offer_price_hold_percentage = q1.getOffPrice("h") / q1._convert(pMls.list_price) * 100, pCust.offer_price_hold_percentage = $filter("number")(pCust.offer_price_hold_percentage, 2), pCust.offer_price_hold_percentage }, Property.prototype.calcOfferPriceHoldFromPerc = function () { return pCust.offer_price_hold = q1._convert(pMls.list_price) * q1._convert(pCust.offer_price_hold_percentage) / 100, pCust.offer_price_hold }, Property.prototype.calcOfferPriceFlipPerc = function () { return pCust.offer_price_flip_percentage = q1._convert(pCust.offer_price_flip) / q1._convert(pMls.list_price) * 100, pCust.offer_price_flip_percentage = $filter("number")(pCust.offer_price_flip_percentage, 2), q1.calculateLoanInterest(), pCust.offer_price_flip_percentage }, Property.prototype.calcOfferPriceFlipFromPerc = function () { return pCust.offer_price_flip = q1._convert(pMls.list_price) * q1._convert(pCust.offer_price_flip_percentage) / 100, q1.calculateLoanInterest(), pCust.offer_price_flip }, Property.prototype.getRoomDescription = function (value) { return "Upper" }, Property.prototype.calculateLoanInterest = function (type) { var purchase_down_payment = q1._convert(pCust.offer_price_flip) * q1._convert(pCust.purchase_down_payment) / 100, purchase_principal_amount = q1._convert(pCust.offer_price_flip) - q1._convert(purchase_down_payment), purchase_total_interest = q1._convert(purchase_principal_amount) * (q1._convert(pCust.purchase_interest_rate) / 100) / 12, purchase_total_points = q1._convert(purchase_principal_amount) * q1._convert(pCust.purchase_points) / 100, purchase_total_cost_of_loan = purchase_total_interest + purchase_total_points; pCust.purchase_after_down_payment = purchase_down_payment, pCust.purchase_principal_amount = purchase_principal_amount, pCust.purchase_total_interest = purchase_total_interest * pCust.holding_period, pCust.purchase_total_points = purchase_total_points * pCust.holding_period, purchase_total_cost_of_loan *= pCust.holding_period, pCust.purchase_total_cost_of_loan = $filter("number")(purchase_total_cost_of_loan, 2); var rehab_down_payment = q1._convert(pCust.estimated_repairs_flip) * q1._convert(pCust.rehab_down_payment) / 100, rehab_principal_amount = q1._convert(pCust.estimated_repairs_flip) - q1._convert(rehab_down_payment), rehab_total_interest = q1._convert(rehab_principal_amount) * (q1._convert(pCust.rehab_interest_rate) / 100 / 12), rehab_total_points = q1._convert(rehab_principal_amount) * q1._convert(pCust.rehab_points) / 100, rehab_total_cost_of_loan = rehab_total_interest + rehab_total_points; pCust.rehab_after_down_payment = rehab_down_payment, pCust.rehab_principal_amount = rehab_principal_amount, pCust.rehab_total_interest = rehab_total_interest * pCust.holding_period, pCust.rehab_total_points = rehab_total_points * pCust.holding_period, rehab_total_cost_of_loan *= pCust.holding_period, pCust.rehab_total_cost_of_loan = $filter("number")(rehab_total_cost_of_loan, 2), pCust.rehab_total_loan = rehab_total_cost_of_loan }, Property.prototype.gridLoanCumulativeInterest = function (iIndex, loanType) { var monthly_loan; return "purchase" === loanType ? monthly_loan = pCust.purchase_total_interest / pCust.holding_period : "rehab" === loanType ? monthly_loan = pCust.rehab_total_interest / pCust.holding_period : "both" === loanType && (monthly_loan = pCust.purchase_total_interest / pCust.holding_period + pCust.rehab_total_interest / pCust.holding_period), iIndex ? monthly_loan * iIndex : "0" }, Property }, __PropertyService = function ($q, $http, Rest) { return { getProperty: function (propertyID, smart_value = !1) { return Rest.all("api/property").post({ pid: propertyID, smart_value: smart_value || !1, timezoneOffset: "-07:00" }, {}, { PropertyKey: propertyID }) }, saveProperty: function (dataObj, isAdmin) { return isAdmin ? Rest.all("api/property/save-property").post(dataObj) : dataObj.is_make_offer ? Rest.all("api/property/makeoffer-property").post(dataObj) : Rest.all("api/property/save-userproperty").post(dataObj) }, addFavourite: function (dataObj) { return Rest.all("api/search/save-usr-pref").post(dataObj) }, addNotes: function (dataObj) { return Rest.all("api/property/add-notes").post(dataObj) }, getNotes: function (dataObj) { return Rest.all("api/property/my-notes").post(dataObj) }, getHoldAnalysis: function (property_ID, user) { var user_ID = user.userID; return Rest.all("api/resources/hold-analysis").post({ pid: property_ID, uid: user_ID }) }, getGDS: function (property_type) { return Rest.all("api/resources/gds").post() }, getCompList: function (propertyList) { return Rest.all("api/property/comp").post(propertyList) }, getRentalCompList: function (propertyList) { if (propertyList.length > 0) { for (var compList = [], i = 0; i < propertyList.length; i++)compList.push(propertyList[i].comp_property_id); return Rest.all("api/property/rental_comp").post({ pid: compList }) } }, mlsProperty: function (userID, pathPID, pathMLSNO, isRental) { var d = $q.defer(), path = "Price" == isRental ? "/api/property/comp/add/" + userID + "/" + pathPID + "/" + pathMLSNO : "/api/property/rentalcomp/add/" + userID + "/" + pathPID + "/" + pathMLSNO; return $http.get(path).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, deletePropertyCompList: function (pathSourPID, pathDestPID, isRental) { var d = $q.defer(), path = 0 == isRental ? "/api/property/comp/remove/" + pathSourPID + "/" + pathDestPID : "/api/property/rentalcomp/remove/" + pathSourPID + "/" + pathDestPID; return $http.get(path).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getPropertyCompList: function (pathPID, pathMLSNO, isRental) { var d = $q.defer(), path = 0 == isRental ? "/api/property/comp/get/" + pathPID + "/" + pathMLSNO : "/api/property/rentalcomp/get/" + pathPID + "/" + pathMLSNO; return $http.get(path).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, rateProperty: function (uid, pathSourPID, pathDestPID, res) { var d = $q.defer(); return $http.get("/api/property/" + (1 === res ? "thumbs-up" : "thumbs-down") + "/" + uid + "/" + pathSourPID + "/" + pathDestPID).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, rateRentalProperty: function (uid, pathSourPID, pathDestPID, res) { var d = $q.defer(); return $http.get("/api/property/" + (1 === res ? "rental-thumbs-up" : "rental-thumbs-down") + "/" + uid + "/" + pathSourPID + "/" + pathDestPID).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, saveInternalTeamComments: function (dataObj, isAdmin) { return Rest.all("api/property/save-internal-team-comments").post(dataObj) }, getInternalTeamComments: function (pid) { return Rest.all("api/property/get-internal-team-comments").post({ pid: pid }) }, saveInvestorInsightsComments: function (dataObj, isAdmin) { return Rest.all("api/property/save-investor-insights-comments").post(dataObj) }, getInvestorInsightsComments: function (pid) { return Rest.all("api/property/get-investor-insights-comments").post({ property_id: pid }) }, getUserMvpAgent: function () { var d = $q.defer(); return $http.get("/api/property/get-user-mvp-agent").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, generatePriceComps: function (pid, SearchOption) { return Rest.all("api/property/generate-price-comps").post({ property_id: pid, SearchLatitude: SearchOption.Latitude, SearchLongitude: SearchOption.Longitude, SearchPropertyType: SearchOption.PropertyType, SearchDistance: SearchOption.Distance, SearchSoldWhen: SearchOption.SoldWhen, SearchSoldPrice: SearchOption.SoldPrice, SearchLimit: SearchOption.Limit, SearchYearBuiltFrom: SearchOption.YearBuiltFrom, SearchYearBuiltTo: SearchOption.YearBuiltTo, SearchBedroomsFrom: SearchOption.BedroomsFrom, SearchBedroomsTo: SearchOption.BedroomsTo, SearchBathroomsFrom: SearchOption.BathroomsFrom, SearchBathroomsTo: SearchOption.BathroomsTo, SearchLotSize: SearchOption.LotSize, SearchSquareFoot: SearchOption.SquareFoot, SearchStoriesFrom: SearchOption.StoriesFrom, SearchStoriesTo: SearchOption.StoriesTo, SearchStyle: SearchOption.Style, SearchStatus: SearchOption.Status, SearchOrderBy: SearchOption.OrderBy, SearchSortOrder: SearchOption.SortOrder, SearchDisplayOnlyFlips: SearchOption.DisplayOnlyFlips }) }, generateRentalComps: function (pid, SearchOption, createdAt) { return Rest.all("api/property/generate-rental-comps").post({ property_id: pid, SearchLatitude: SearchOption.Latitude, SearchLongitude: SearchOption.Longitude, SearchPropertyType: SearchOption.rPropertyType, SearchDistance: SearchOption.rDistance, SearchSoldWhen: SearchOption.rSoldWhen, SearchLimit: SearchOption.rLimit, SearchYearBuiltFrom: SearchOption.rYearBuiltFrom, SearchYearBuiltTo: SearchOption.rYearBuiltTo, SearchBedroomsFrom: SearchOption.rBedroomsFrom, SearchBedroomsTo: SearchOption.rBedroomsTo, SearchBathroomsFrom: SearchOption.rBathroomsFrom, SearchBathroomsTo: SearchOption.rBathroomsTo, SearchLotSize: SearchOption.rLotSize, SearchSquareFoot: SearchOption.rSquareFoot, SearchStoriesFrom: SearchOption.rStoriesFrom, SearchStoriesTo: SearchOption.rStoriesTo, SearchStyle: SearchOption.rStyle, SearchStatus: SearchOption.rStatus, SearchOrderBy: SearchOption.rOrderBy, SearchSortOrder: SearchOption.rSortOrder, created_at: createdAt }) }, contactAgent: function (dataObj) { return Rest.all("api/property/contact-agent").post(dataObj) }, GetNearbySchools: function (dataObj) { var d = $q.defer(); return $http.post("/api/property/get-nearby-schools", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getSoundscore: function (dataObj) { var d = $q.defer(); return $http.post("api/property/get-soundscore", dataObj).success(function (data) { data = JSON.parse(data.result), d.resolve(data.result[0]) }).error(function (reason) { d.reject(reason) }), d.promise }, savePriceComps: function (userId, propertyId, compPropertyId) { return Rest.all("api/property/save-price-comps").post({ userId: userId, propertyId: propertyId, compPropertyId: compPropertyId }) }, savePriceCompsParams: function (data) { return Rest.all("api/property/save-price-comps-params").post(data) }, getSavedPriceCompsParams: function (params) { var d = $q.defer(); return $http.post("/api/property/get-saved-price-comps-params", params).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, deletePriceComps: function (userId, propertyId, compPropertyId) { return Rest.all("api/property/delete-price-comps").post({ userId: userId, propertyId: propertyId, compPropertyId: compPropertyId }) }, getSavedPriceComps: function (userId, propertyId) { return Rest.all("api/property/get-saved-price-comps").post({ userId: userId, propertyId: propertyId }) }, getAdminSavedPriceComps: function (propertyId, userId) { return Rest.all("api/property/get-admin-saved-price-comps").post({ propertyId: propertyId, user_id: userId }) }, getPropertyCompsListInfo: function (propertyID, compPropertyIDs, isRental) { var Path = "api/property/price-comps-list-info"; return 1 == isRental && (Path = "api/property/rental-comps-list-info"), Rest.all(Path).post({ property_id: propertyID, comp_property_ids: compPropertyIDs }) }, saveRentalComps: function (userId, propertyId, compPropertyId) { return Rest.all("api/property/save-rental-comps").post({ userId: userId, propertyId: propertyId, compPropertyId: compPropertyId }) }, saveRentalCompsParams: function (data) { return Rest.all("api/property/save-rental-comps-params").post(data) }, getSavedRentalCompsParams: function (params) { var d = $q.defer(); return $http.post("/api/property/get-saved-rental-comps-params", params).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, deleteRentalComps: function (userId, propertyId, compPropertyId) { return Rest.all("api/property/delete-rental-comps").post({ userId: userId, propertyId: propertyId, compPropertyId: compPropertyId }) }, getPriceReportCMA: function (CmaData) { return Rest.all("api/smartcma/get-price-report-cma").post({ CmaData: CmaData }) }, getSavedRentalComps: function (userId, propertyId) { return Rest.all("api/property/get-saved-rental-comps").post({ userId: userId, propertyId: propertyId }) }, getAdminSavedRentalComps: function (propertyId, userId) { return Rest.all("api/property/get-admin-saved-rental-comps").post({ propertyId: propertyId, user_id: userId }) }, GenSharableLink: function (dataObj) { var d = $q.defer(); return $http.post("api/property/sharable-link", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, ExitSharableLink: function (data) { var d = $q.defer(); return $http.post("api/property/exit-sharable-link", data).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getPropertyPriceHistory: function (dataObj) { var d = $q.defer(); return $http.post("/api/property/get-property-price-history", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getPropertyHistory: function (dataObj) { var d = $q.defer(); return $http.post("api/property/get-property-history", dataObj).success(function (data) { d.resolve(data.propertyHistory) }).error(function (reason) { d.reject(reason) }), d.promise }, getLastPropertyPurchased: function (dataObj) { var d = $q.defer(); return $http.post("api/property/get-last-property-purchased", dataObj).success(function (data) { d.resolve(data.propertyHistory) }).error(function (reason) { d.reject(reason) }), d.promise }, checkPublicLinkPassword: function (dataObj) { var d = $q.defer(); return $http.post("api/property/check-public-link-password", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getShareableAgentInfo: function (id) { var d = $q.defer(); return $http.post("api/resources/get-shareable-agent-info", { property_id: id }).success(function (data) { d.resolve(data.agentShareableInfo[0]) }).error(function (reason) { d.reject(reason) }), d.promise }, getPublicLinksAgentInfo: function (id) { var d = $q.defer(); return $http.post("api/resources/get-public-links-agent-info", { user_id: id }).success(function (data) { d.resolve(data.singleAgentInfo[0]) }).error(function (reason) { d.reject(reason) }), d.promise }, getEliteAgentsInfo: function (zip_code) { var d = $q.defer(); return $http.post("api/property/get-elite-agents-info", { zip_code: zip_code }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, contactEliteAgents: function (dataObj) { var d = $q.defer(); return $http.post("api/agent/contact-elite-agents", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getPropertyUserSpec: function (id) { var d = $q.defer(); return $http.get("/api/property/property-user-spec/" + id).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, setPropertyUserSpec: function (id, CompsEstimated, Comments, UpdateHoldFlip) { var d = $q.defer(); return $http.post("/api/property/property-user-spec/" + id, { esp: CompsEstimated, comments: Comments, update_hold_flip: UpdateHoldFlip }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, clearPropertyUserSpec: function (id) { var d = $q.defer(); return $http.post("/api/property/clear-property-user-spec/" + id).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, insertContactPersonDetails: function (dataObj) { var d = $q.defer(); return $http.post("/api/property/insert-contact-person-details", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getFlippedPropertyLastYear: function (dataObj) { return Rest.all("api/property/get_flipped_property_last_year").post({ dataObj: dataObj }) } } }; __PropertyFactory.$inject = ["$filter", "UserFac", "$window", "$sessionStorage"], __PropertyService.$inject = ["$q", "$http", "Restangular"], appService.factory("PropertyFac", __PropertyFactory), appService.service("PropertyService", __PropertyService) }(), function () { "use strict"; var __SmartCmaFactory = function ($filter, UserFac, $window, $sessionStorage) { var q1, pMls = null; function SmartCma(vmScope) { q1 = this, (pMls = vmScope.pP).pCust, pMls.bRule, q1._initVars() } return SmartCma.prototype.getFakeString = function () { return "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum." }, SmartCma }, __SmartCmaService = function ($q, $http, Rest) { return { getUserSubscription: function (email_address) { return Rest.all("api/smartcma/get-user-subscription").post({ email_address: email_address }) }, getAddressFilter: function (SearchTxt) { return Rest.all("api/smartcma/address-filetr").post({ SearchTxt: SearchTxt }) }, getPropertyByAddress: function (Addr) { return Rest.all("api/smartcma/property-by-address").post({ address: Addr.address, unit_number: Addr.unit_number, city_name: Addr.city_name, state_code: Addr.state_code, zip_code: Addr.zip_code, property_type: Addr.property_type, bedroom_count: Addr.bedroom_count, bathroom_count: Addr.bathroom_count, year_built: Addr.year_built, square_foot: Addr.square_foot }) }, getPropertyByMlNumber: function (ml_number, smart_value = null) { return Rest.all("api/smartcma/property-by-ml-number").post({ ml_number: ml_number, smart_value: smart_value }) }, generatePriceComps: function (pid, SearchOption, smart_value = null, createdAt = null) { return Rest.all("api/smartcma/generate-price-comps").post({ property_id: pid, SearchLatitude: SearchOption.Latitude, SearchLongitude: SearchOption.Longitude, SearchPropertyType: SearchOption.PropertyType, SearchDistance: SearchOption.Distance, SearchSoldWhen: SearchOption.SoldWhen, SearchSoldPrice: SearchOption.SoldPrice, SearchLimit: SearchOption.Limit, SearchYearBuiltFrom: SearchOption.YearBuiltFrom, SearchYearBuiltTo: SearchOption.YearBuiltTo, SearchBedroomsFrom: SearchOption.BedroomsFrom, SearchBedroomsTo: SearchOption.BedroomsTo, SearchBathroomsFrom: SearchOption.BathroomsFrom, SearchBathroomsTo: SearchOption.BathroomsTo, SearchLotSize: SearchOption.LotSize, SearchSquareFoot: SearchOption.SquareFoot, SearchStoriesFrom: SearchOption.StoriesFrom, SearchStoriesTo: SearchOption.StoriesTo, SearchStyle: SearchOption.Style, SearchStatus: SearchOption.Status, SearchOrderBy: SearchOption.OrderBy, SearchSortOrder: SearchOption.SortOrder, SearchDisplayOnlyFlips: SearchOption.DisplayOnlyFlips, smart_value: smart_value, created_at: createdAt }) }, generateRentalComps: function (pid, SearchOption, createdAt = null) { return Rest.all("api/smartcma/generate-rental-comps").post({ property_id: pid, SearchLatitude: SearchOption.Latitude, SearchLongitude: SearchOption.Longitude, SearchPropertyType: SearchOption.PropertyType, SearchDistance: SearchOption.Distance, SearchSoldWhen: SearchOption.SoldWhen, SearchSoldPrice: SearchOption.SoldPrice, SearchLimit: SearchOption.Limit, SearchYearBuiltFrom: SearchOption.YearBuiltFrom, SearchYearBuiltTo: SearchOption.YearBuiltTo, SearchBedroomsFrom: SearchOption.BedroomsFrom, SearchBedroomsTo: SearchOption.BedroomsTo, SearchBathroomsFrom: SearchOption.BathroomsFrom, SearchBathroomsTo: SearchOption.BathroomsTo, SearchLotSize: SearchOption.LotSize, SearchSquareFoot: SearchOption.SquareFoot, SearchStoriesFrom: SearchOption.StoriesFrom, SearchStoriesTo: SearchOption.StoriesTo, SearchStyle: SearchOption.Style, SearchStatus: SearchOption.rStatus, SearchOrderBy: SearchOption.OrderBy, SearchSortOrder: SearchOption.SortOrder, created_at: createdAt }) }, getCompsAttr: function (isRental) { var path = 0 == isRental ? "api/smartcma/pcomp-attr" : "api/smartcma/rcomp-attr"; return Rest.all(path).post({}) }, getPropertyCustomHistory: function (pid, smart_value = null) { return Rest.all("api/smartcma/property_custom_history").post({ property_id: pid, smart_value: smart_value }) }, getPropertyByAttribute: function (attr) { return Rest.all("api/smartcma/property-by-attribute").post({ property_type: attr.property_type, bedroom_count: attr.bedroom_count, bathroom_count: attr.bathroom_count, year_built: attr.year_built, square_foot: attr.square_foot }) }, addressAutoComplate: function (SearchTxt) { return Rest.all("api/smartcma/address-auto-search-new").post({ SearchTxt: SearchTxt }) }, checkInInsights: function (SearchTxt) { return Rest.all("api/smartcma/check-in-insights").post({ SearchTxt: SearchTxt }) }, getSettingsOptionValue: function (optionType) { return Rest.all("api/smartcma/get-settings-option-value").post({ optionType: optionType }) }, savePriceCMA: function (userId, propertyId, compPropertyId, sPropertySource, sSourceId, isManual) { return Rest.all("api/smartcma/save-price-cma").post({ userId: userId, propertyId: propertyId, compPropertyId: compPropertyId, sPropertySource: sPropertySource, sSourceId: sSourceId, isManual: isManual }) }, deletePriceCMA: function (userId, propertyId, compPropertyId, sPropertySource, sSourceId) { return Rest.all("api/smartcma/delete-price-cma").post({ userId: userId, propertyId: propertyId, compPropertyId: compPropertyId, sPropertySource: sPropertySource, sSourceId: sSourceId }) }, getSavedPriceCMA: function (userId, propertyId, createdAt = null) { return Rest.all("api/smartcma/get-saved-price-cma").post({ userId: userId, propertyId: propertyId, createdAt: createdAt }) }, getAdminSavedPriceCMA: function (propertyId, userId) { return Rest.all("api/smartcma/get-admin-saved-price-cma").post({ propertyId: propertyId, user_id: userId }) }, saveRentalCMA: function (userId, propertyId, compPropertyId, sPropertySource, sSourceId) { return Rest.all("api/smartcma/save-rental-cma").post({ userId: userId, propertyId: propertyId, compPropertyId: compPropertyId, sPropertySource: sPropertySource, sSourceId: sSourceId }) }, deleteRentalCMA: function (userId, propertyId, compPropertyId, sPropertySource, sSourceId) { return Rest.all("api/smartcma/delete-rental-cma").post({ userId: userId, propertyId: propertyId, compPropertyId: compPropertyId, sPropertySource: sPropertySource, sSourceId: sSourceId }) }, getSavedRentalCMA: function (userId, propertyId, createdAt = null) { return Rest.all("api/smartcma/get-saved-rental-cma").post({ userId: userId, propertyId: propertyId, createdAt: createdAt }) }, getAdminSavedRentalCMA: function (propertyId, userId) { return Rest.all("api/smartcma/get-admin-saved-rental-cma").post({ propertyId: propertyId, user_id: userId }) }, generateSavedPriceCMA: function (userID, propertyID) { return Rest.all("api/smartcma/generate-saved-price-cma").post({ user_id: userID, property_id: propertyID }) }, getPropertyCMAListInfo: function (propertyID, compPropertyIDs, isRental) { var Path = "api/smartcma/price-cma-list-info"; return 1 == isRental && (Path = "api/smartcma/rental-cma-list-info"), Rest.all(Path).post({ property_id: propertyID, comp_property_ids: compPropertyIDs }) }, getUserMvpAgent: function () { var d = $q.defer(); return $http.get("/api/smartcma/get-user-mvp-agent").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getPriceReportCMA: function (CmaData) { return Rest.all("api/smartcma/get-price-report-cma").post({ CmaData: CmaData }) }, SavePriceReportCMA: function (CmaData) { return Rest.all("api/smartcma/save-price-report-cma").post({ CmaData: CmaData }) }, SaveRentalReportCMA: function (CmaData) { return Rest.all("api/smartcma/save-rental-report-cma").post({ CmaData: CmaData }) }, pCompsPriceHistory: function (pids) { return Rest.all("api/smartcma/pcomps_price_history").post({ pids: pids }) }, PricePropertyCurrentValue: function (property_type, zip_code, city) { return Rest.all("api/smartcma/price-property-current-value").post({ property_type: property_type, zip_code: zip_code, city: city }) }, GetUserProfileImage: function (UserId) { return Rest.all("api/smartcma/user_profile_image").post({ UserId: UserId }) }, mlsProperty: function (userID, pathPID, pathMLSNO, isRental) { var d = $q.defer(), path = "Price" == isRental ? "/api/smartcma/pcomp/manual/" + userID + "/" + pathPID + "/" + pathMLSNO : "/api/smartcma/rcomp/manual/" + userID + "/" + pathPID + "/" + pathMLSNO; return $http.get(path).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getPropertyUserSpec: function (id) { var d = $q.defer(); return $http.get("/api/smartcma/property-user-spec/" + id).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, setPropertyUserSpec: function (id, CompsEstimated, Comments) { var d = $q.defer(); return $http.post("/api/smartcma/property-user-spec/" + id, { suggested_price: CompsEstimated, comments: Comments }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, clearPropertyUserSpec: function (id) { var d = $q.defer(); return $http.post("/api/smartcma/clear-property-user-spec/" + id).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getPriceReportCmaData: function (pid, userID, tabType) { var d = $q.defer(); return $http.post("api/smartcma/get_smart_cma_search_data", { property_id: pid, user_id: userID, type: tabType }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, addToInsightsMain: function (insightData) { return Rest.all("api/smartcma/add_to_insights_main").post({ address: insightData.address, contactDetail: insightData.contactDetail }) }, getMLNumberFromPropertyDetails: function (insights_property_id) { return Rest.all("api/smartcma/get_ml_number_from_property_details").post({ insights_property_id: insights_property_id }) }, getPropertyDetialsFromExternals: function (propertyId) { return Rest.all("api/smartcma/get-property-details-from-externals").post({ property_id: propertyId }) } } }; __SmartCmaFactory.$inject = ["$filter", "UserFac", "$window", "$sessionStorage"], __SmartCmaService.$inject = ["$q", "$http", "Restangular"], appService.factory("SmartCmaFac", __SmartCmaFactory), appService.service("SmartCmaService", __SmartCmaService) }(), function () { "use strict"; var __SmartCmaFactory = function ($filter, UserFac, $window, $sessionStorage) { var q1, pMls = null; function SmartCma(vmScope) { q1 = this, (pMls = vmScope.pP).pCust, pMls.bRule, q1._initVars() } return SmartCma.prototype.getFakeString = function () { return "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum." }, SmartCma }, __SmartCmaService = function ($q, $http, Rest) { return { getUserSubscription: function (email_address) { return Rest.all("api/smartcmaold/get-user-subscription").post({ email_address: email_address }) }, getAddressFilter: function (SearchTxt) { return Rest.all("api/smartcmaold/address-filetr").post({ SearchTxt: SearchTxt }) }, getPropertyByAddress: function (Addr) { return Rest.all("api/smartcmaold/property-by-address").post({ address: Addr.address, unit_number: Addr.unit_number, city_name: Addr.city_name, state_code: Addr.state_code, zip_code: Addr.zip_code, property_type: Addr.property_type, bedroom_count: Addr.bedroom_count, bathroom_count: Addr.bathroom_count, year_built: Addr.year_built, square_foot: Addr.square_foot }) }, getPropertyByMlNumber: function (ml_number, smart_value = null) { return Rest.all("api/smartcmaold/property-by-ml-number").post({ ml_number: ml_number, smart_value: smart_value }) }, generatePriceComps: function (pid, SearchOption, smart_value = null, createdAt = null) { return Rest.all("api/smartcmaold/generate-price-comps").post({ property_id: pid, SearchLatitude: SearchOption.Latitude, SearchLongitude: SearchOption.Longitude, SearchPropertyType: SearchOption.PropertyType, SearchDistance: SearchOption.Distance, SearchSoldWhen: SearchOption.SoldWhen, SearchSoldPrice: SearchOption.SoldPrice, SearchLimit: SearchOption.Limit, SearchYearBuiltFrom: SearchOption.YearBuiltFrom, SearchYearBuiltTo: SearchOption.YearBuiltTo, SearchBedroomsFrom: SearchOption.BedroomsFrom, SearchBedroomsTo: SearchOption.BedroomsTo, SearchBathroomsFrom: SearchOption.BathroomsFrom, SearchBathroomsTo: SearchOption.BathroomsTo, SearchLotSize: SearchOption.LotSize, SearchSquareFoot: SearchOption.SquareFoot, SearchStoriesFrom: SearchOption.StoriesFrom, SearchStoriesTo: SearchOption.StoriesTo, SearchStyle: SearchOption.Style, SearchStatus: SearchOption.Status, SearchOrderBy: SearchOption.OrderBy, SearchSortOrder: SearchOption.SortOrder, SearchDisplayOnlyFlips: SearchOption.DisplayOnlyFlips, smart_value: smart_value, created_at: createdAt }) }, generateRentalComps: function (pid, SearchOption, createdAt = null) { return Rest.all("api/smartcmaold/generate-rental-comps").post({ property_id: pid, SearchLatitude: SearchOption.Latitude, SearchLongitude: SearchOption.Longitude, SearchPropertyType: SearchOption.PropertyType, SearchDistance: SearchOption.Distance, SearchSoldWhen: SearchOption.SoldWhen, SearchSoldPrice: SearchOption.SoldPrice, SearchLimit: SearchOption.Limit, SearchYearBuiltFrom: SearchOption.YearBuiltFrom, SearchYearBuiltTo: SearchOption.YearBuiltTo, SearchBedroomsFrom: SearchOption.BedroomsFrom, SearchBedroomsTo: SearchOption.BedroomsTo, SearchBathroomsFrom: SearchOption.BathroomsFrom, SearchBathroomsTo: SearchOption.BathroomsTo, SearchLotSize: SearchOption.LotSize, SearchSquareFoot: SearchOption.SquareFoot, SearchStoriesFrom: SearchOption.StoriesFrom, SearchStoriesTo: SearchOption.StoriesTo, SearchStyle: SearchOption.Style, SearchStatus: SearchOption.rStatus, SearchOrderBy: SearchOption.OrderBy, SearchSortOrder: SearchOption.SortOrder, created_at: createdAt }) }, getCompsAttr: function (isRental) { var path = 0 == isRental ? "api/smartcmaold/pcomp-attr" : "api/smartcmaold/rcomp-attr"; return Rest.all(path).post({}) }, getPropertyCustomHistory: function (pid, smart_value = null) { return Rest.all("api/smartcmaold/property_custom_history").post({ property_id: pid, smart_value: smart_value }) }, getPropertyByAttribute: function (attr) { return Rest.all("api/smartcmaold/property-by-attribute").post({ property_type: attr.property_type, bedroom_count: attr.bedroom_count, bathroom_count: attr.bathroom_count, year_built: attr.year_built, square_foot: attr.square_foot }) }, addressAutoComplate: function (SearchTxt) { return Rest.all("api/smartcmaold/address-auto-search").post({ SearchTxt: SearchTxt }) }, savePriceCMA: function (userId, propertyId, compPropertyId) { return Rest.all("api/smartcmaold/save-price-cma").post({ userId: userId, propertyId: propertyId, compPropertyId: compPropertyId }) }, deletePriceCMA: function (userId, propertyId, compPropertyId) { return Rest.all("api/smartcmaold/delete-price-cma").post({ userId: userId, propertyId: propertyId, compPropertyId: compPropertyId }) }, getSavedPriceCMA: function (userId, propertyId, createdAt = null) { return Rest.all("api/smartcmaold/get-saved-price-cma").post({ userId: userId, propertyId: propertyId, createdAt: createdAt }) }, getAdminSavedPriceCMA: function (propertyId) { return Rest.all("api/smartcmaold/get-admin-saved-price-cma").post({ propertyId: propertyId }) }, saveRentalCMA: function (userId, propertyId, compPropertyId) { return Rest.all("api/smartcmaold/save-rental-cma").post({ userId: userId, propertyId: propertyId, compPropertyId: compPropertyId }) }, deleteRentalCMA: function (userId, propertyId, compPropertyId) { return Rest.all("api/smartcmaold/delete-rental-cma").post({ userId: userId, propertyId: propertyId, compPropertyId: compPropertyId }) }, getSavedRentalCMA: function (userId, propertyId, createdAt = null) { return Rest.all("api/smartcmaold/get-saved-rental-cma").post({ userId: userId, propertyId: propertyId, createdAt: createdAt }) }, getAdminSavedRentalCMA: function (propertyId) { return Rest.all("api/smartcmaold/get-admin-saved-rental-cma").post({ propertyId: propertyId }) }, generateSavedPriceCMA: function (userID, propertyID) { return Rest.all("api/smartcmaold/generate-saved-price-cma").post({ user_id: userID, property_id: propertyID }) }, getPropertyCMAListInfo: function (propertyID, compPropertyIDs, isRental) { var Path = "api/smartcmaold/price-cma-list-info"; return 1 == isRental && (Path = "api/smartcmaold/rental-cma-list-info"), Rest.all(Path).post({ property_id: propertyID, comp_property_ids: compPropertyIDs }) }, getUserMvpAgent: function () { var d = $q.defer(); return $http.get("/api/smartcmaold/get-user-mvp-agent").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getPriceReportCMA: function (CmaData) { return Rest.all("api/smartcmaold/get-price-report-cma").post({ CmaData: CmaData }) }, SavePriceReportCMA: function (CmaData) { return Rest.all("api/smartcmaold/save-price-report-cma").post({ CmaData: CmaData }) }, SaveRentalReportCMA: function (CmaData) { return Rest.all("api/smartcmaold/save-rental-report-cma").post({ CmaData: CmaData }) }, pCompsPriceHistory: function (pids) { return Rest.all("api/smartcmaold/pcomps_price_history").post({ pids: pids }) }, PricePropertyCurrentValue: function (property_type, zip_code, city) { return Rest.all("api/smartcmaold/price-property-current-value").post({ property_type: property_type, zip_code: zip_code, city: city }) }, GetUserProfileImage: function (UserId) { return Rest.all("api/smartcmaold/user_profile_image").post({ UserId: UserId }) }, mlsProperty: function (userID, pathPID, pathMLSNO, isRental) { var d = $q.defer(), path = "Price" == isRental ? "/api/smartcmaold/pcomp/manual/" + userID + "/" + pathPID + "/" + pathMLSNO : "/api/smartcmaold/rcomp/manual/" + userID + "/" + pathPID + "/" + pathMLSNO; return $http.get(path).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getPropertyUserSpec: function (id) { var d = $q.defer(); return $http.get("/api/smartcmaold/property-user-spec/" + id).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, setPropertyUserSpec: function (id, CompsEstimated, Comments) { var d = $q.defer(); return $http.post("/api/smartcmaold/property-user-spec/" + id, { suggested_price: CompsEstimated, comments: Comments }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, clearPropertyUserSpec: function (id) { var d = $q.defer(); return $http.post("/api/smartcmaold/clear-property-user-spec/" + id).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getPriceReportCmaData: function (pid, userID, tabType) { var d = $q.defer(); return $http.post("api/smartcmaold/get_smart_cma_search_data", { property_id: pid, user_id: userID, type: tabType }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise } } }; __SmartCmaFactory.$inject = ["$filter", "UserFac", "$window", "$sessionStorage"], __SmartCmaService.$inject = ["$q", "$http", "Restangular"], appService.factory("SmartCmaFac", __SmartCmaFactory), appService.service("SmartCmaOldService", __SmartCmaService) }(), function () { "use strict"; var __SearchService = function ($q, $http) { return { index: function (formDataObj) { var d = $q.defer(); return formDataObj.timezoneOffset = "-07:00", $http.post("/api/search", formDataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, saveSearch: function (formDataObj) { var d = $q.defer(); return $http.post("/api/search/save", formDataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, saveUsrPref: function (dataObj) { var d = $q.defer(); return $http.post("/api/search/save-usr-pref", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getPageLimit: function () { var d = $q.defer(); return $http.get("/api/search/page-limit").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, saveSearchCriteriaAudit: function (dataObj) { var d = $q.defer(); return $http.post("/api/search/search-criteria-audit", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, validateProperty: function (dataObj) { var d = $q.defer(); return $http.post("api/search/validate-property", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, deleteSavedSearch: function (dataObj) { dataObj = { search_name: dataObj }; var d = $q.defer(); return $http.post("api/search/delete-save-search", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getUserSavedSearch: function (dataObj) { dataObj = { user_id: dataObj }; var d = $q.defer(); return $http.post("api/search/get-user-searches", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getMlsByOffice: function (office) { var dataObj = { office_mls: office }, d = $q.defer(); return $http.post("api/search/get-mls-by-office", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, MlsIds: null, getActivePropertiesBy: function (dataObj) { var d = $q.defer(); return $http.post("api/search/get-active-properties-by", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getQuickSearch: function (dataObj) { var d = $q.defer(); return dataObj.timezoneOffset = "-07:00", $http.post("api/search/quick-search", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, checkSearchName: function (formDataObj) { var d = $q.defer(); return $http.post("/api/search/check-search-name", formDataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise } } }, __SearchFactory = function (ResourceS, SearchS, $filter, $window, $sessionStorage) { var sForm = null, dpPropertyList = [{ id: "single_family", label: "Single Family" }, { id: "townhouse", label: "Townhouse" }, { id: "multi_family", label: "Multi-Family" }, { id: "condo", label: "Condo" }]; function Search(vmsForm) { sForm = vmsForm } return Search.prototype._setFilterSearch = function (searchArr) { void 0 === $sessionStorage.resultsObj && ($sessionStorage.resultsObj = new Array), $sessionStorage.resultsObj = searchArr }, Search.prototype._getFilterSearch = function () { if ($sessionStorage.resultsObj) return $sessionStorage.resultsObj }, Search.prototype._setSearchData = function (sForm) { void 0 === $sessionStorage.searchObj && ($sessionStorage.searchObj = new Object), $sessionStorage.searchObj.deal_type = sForm.deal_type, $sessionStorage.searchObj.funding = sForm.funding, $sessionStorage.searchObj.property_type = sForm.property_type, $sessionStorage.searchObj.county = sForm.county, $sessionStorage.searchObj.community = sForm.community, $sessionStorage.searchObj.city_zip = sForm.city_zip, $sessionStorage.searchObj.cf_opr = sForm.cf_opr, $sessionStorage.searchObj.cash_flow = sForm.cash_flow, $sessionStorage.searchObj.coc_opr = sForm.coc_opr, $sessionStorage.searchObj.coc = sForm.coc, $sessionStorage.searchObj.np_opr = sForm.np_opr, $sessionStorage.searchObj.net_profit = sForm.net_profit, $sessionStorage.searchObj.roi_opr = sForm.roi_opr, $sessionStorage.searchObj.roi = sForm.roi, $sessionStorage.searchObj.yearBuilt_min = sForm.yearbuilt_min, $sessionStorage.searchObj.yearBuilt_max = sForm.yearbuilt_max, $sessionStorage.searchObj.sqFoot_min = sForm.sqfoot_min, $sessionStorage.searchObj.sqFoot_max = sForm.sqfoot_max, $sessionStorage.searchObj.hoa = sForm.hoa, $sessionStorage.searchObj.minimum_beds = sForm.mini_beds, $sessionStorage.searchObj.minimum_baths = sForm.mini_baths, $sessionStorage.searchObj.garage = sForm.garage, $sessionStorage.searchObj.view = sForm.view, $sessionStorage.searchObj.waterfront = sForm.waterfront, $sessionStorage.searchObj.school_dist = sForm.school_district, $sessionStorage.searchObj.remarks = sForm.remarks, $sessionStorage.searchObj.keywordslgopr = sForm.keywordslgopr, $sessionStorage.searchObj.parking = sForm.parking, $sessionStorage.searchObj.budget_min = sForm.budget_min, $sessionStorage.searchObj.budget_max = sForm.budget_max, $sessionStorage.searchObj.status = sForm.status, $sessionStorage.searchObj.priceReduced = sForm.price_reduced, $sessionStorage.searchObj.tos = sForm.time_on_site, $sessionStorage.searchObj.address = sForm.address, $sessionStorage.searchObj.latitude = sForm.latitude, $sessionStorage.searchObj.longitude = sForm.longitude, $sessionStorage.searchObj.distance = sForm.distance, $sessionStorage.searchObj.bank_owned = sForm.bank_owned, $sessionStorage.searchObj.third_party_approval = sForm.third_party_approval, $sessionStorage.searchObj.auction = sForm.auction, $sessionStorage.searchObj.cr_opr = sForm.cr_opr, $sessionStorage.searchObj.cap_rate = sForm.cap_rate, $sessionStorage.searchObj.sqftopr = sForm.sqftopr, $sessionStorage.searchObj.sqft = sForm.sqft, $sessionStorage.searchObj.hot_deal_type = sForm.hot_deal_type, $sessionStorage.searchObj.terms = sForm.terms, $sessionStorage.searchObj.photosopr = sForm.photosopr, $sessionStorage.searchObj.photos = sForm.photos, $sessionStorage.searchObj.building_condition = sForm.building_condition, $sessionStorage.searchObj.fixer_upper = sForm.fixer_upper, $sessionStorage.searchObj.propStatus = sForm.ad_prop_status, $sessionStorage.searchObj.is_validated = sForm.ad_is_validated, $sessionStorage.searchObj.is_visible = sForm.ad_is_visible, $sessionStorage.searchObj.list_agent_id = sForm.ad_list_agent_id, $sessionStorage.searchObj.sell_agent_no = sForm.ad_sell_agent_no, $sessionStorage.searchObj.apn = sForm.ad_apn, $sessionStorage.searchObj.list_date = sForm.ad_list_date, $sessionStorage.searchObj.status_change_date = sForm.ad_status_change_date, $sessionStorage.searchObj.created_date = sForm.ad_created_date, $sessionStorage.searchObj.updated_date = sForm.ad_updated_date, $sessionStorage.searchObj.mls_no = sForm.ad_mls_no }, Search.prototype._setSessData = function (admin) { $sessionStorage.resultsObj = void 0, void 0 === $sessionStorage.searchObj && ($sessionStorage.searchObj = new Object), $sessionStorage.searchObj.deal_type = sForm.deal_type, $sessionStorage.searchObj.funding = sForm.funding, $sessionStorage.searchObj.property_type = sForm.property_type, $sessionStorage.searchObj.county = sForm.county, $sessionStorage.searchObj.community = sForm.community, $sessionStorage.searchObj.city_zip = sForm.city_zip, $sessionStorage.searchObj.cf_opr = sForm.cf_opr, $sessionStorage.searchObj.cash_flow = sForm.cash_flow, $sessionStorage.searchObj.coc_opr = sForm.coc_opr, $sessionStorage.searchObj.coc = sForm.coc, $sessionStorage.searchObj.np_opr = sForm.np_opr, $sessionStorage.searchObj.net_profit = sForm.net_profit, $sessionStorage.searchObj.roi_opr = sForm.roi_opr, $sessionStorage.searchObj.roi = sForm.roi, $sessionStorage.searchObj.yearBuilt_min = sForm.yearBuilt.min, $sessionStorage.searchObj.yearBuilt_max = sForm.yearBuilt.max, $sessionStorage.searchObj.sqFoot_min = sForm.sqFoot.min, $sessionStorage.searchObj.sqFoot_max = sForm.sqFoot.max, $sessionStorage.searchObj.hoa = sForm.hoa, $sessionStorage.searchObj.minimum_beds = sForm.minimum_beds, $sessionStorage.searchObj.minimum_baths = sForm.minimum_baths, $sessionStorage.searchObj.garage = sForm.garage, $sessionStorage.searchObj.view = sForm.view, $sessionStorage.searchObj.waterfront = sForm.waterfront, $sessionStorage.searchObj.school_dist = sForm.school_dist, $sessionStorage.searchObj.remarks = sForm.remarks, $sessionStorage.searchObj.keywordslgopr = sForm.keywordslgopr, $sessionStorage.searchObj.parking = sForm.parking, $sessionStorage.searchObj.budget_min = sForm.budget.min, $sessionStorage.searchObj.budget_max = sForm.budget.max, $sessionStorage.searchObj.status = sForm.status, $sessionStorage.searchObj.priceReduced = sForm.priceReduced, $sessionStorage.searchObj.tos = sForm.tos, $sessionStorage.searchObj.address = sForm.address, $sessionStorage.searchObj.latitude = sForm.latitude, $sessionStorage.searchObj.longitude = sForm.longitude, $sessionStorage.searchObj.distance = sForm.distance, $sessionStorage.searchObj.bank_owned = sForm.bank_owned, $sessionStorage.searchObj.third_party_approval = sForm.third_party_approval, $sessionStorage.searchObj.auction = sForm.auction, $sessionStorage.searchObj.cr_opr = sForm.cr_opr, $sessionStorage.searchObj.cap_rate = sForm.cap_rate, $sessionStorage.searchObj.sqftopr = sForm.sqftopr, $sessionStorage.searchObj.sqft = sForm.sqft, $sessionStorage.searchObj.hot_deal_type = sForm.hot_deal_type, $sessionStorage.searchObj.terms = sForm.terms, $sessionStorage.searchObj.photosopr = sForm.photosopr, $sessionStorage.searchObj.photos = sForm.photos, $sessionStorage.searchObj.building_condition = sForm.building_condition, $sessionStorage.searchObj.fixer_upper = sForm.fixer_upper, $sessionStorage.searchObj.propStatus = sForm.propStatus, $sessionStorage.searchObj.is_validated = sForm.is_validated, $sessionStorage.searchObj.is_visible = sForm.is_visible, $sessionStorage.searchObj.list_agent_id = sForm.list_agent_id, $sessionStorage.searchObj.sell_agent_no = sForm.sell_agent_no, $sessionStorage.searchObj.apn = sForm.apn, $sessionStorage.searchObj.list_date = sForm.list_date, $sessionStorage.searchObj.status_change_date = sForm.status_change_date, $sessionStorage.searchObj.created_date = sForm.created_date, $sessionStorage.searchObj.updated_date = sForm.updated_date, $sessionStorage.searchObj.mls_no = sForm.mls_no, admin && ($sessionStorage.searchObj.isClick = sForm.btnClicked) }, Search.prototype._getSessData = function (admin) { $sessionStorage.searchObj && (sForm.deal_type = $sessionStorage.searchObj.deal_type, sForm.funding = $sessionStorage.searchObj.funding, sForm.property_type = $sessionStorage.searchObj.property_type, sForm.county = $sessionStorage.searchObj.county, sForm.community = $sessionStorage.searchObj.community, sForm.city_zip = $sessionStorage.searchObj.city_zip, sForm.cf_opr = $sessionStorage.searchObj.cf_opr, sForm.cash_flow = $sessionStorage.searchObj.cash_flow, sForm.coc_opr = $sessionStorage.searchObj.coc_opr, sForm.coc = $sessionStorage.searchObj.coc, sForm.np_opr = $sessionStorage.searchObj.np_opr, sForm.net_profit = $sessionStorage.searchObj.net_profit, sForm.roi_opr = $sessionStorage.searchObj.roi_opr, sForm.roi = $sessionStorage.searchObj.roi, sForm.yearBuilt.min = $sessionStorage.searchObj.yearBuilt_min, sForm.yearBuilt.max = $sessionStorage.searchObj.yearBuilt_max, sForm.sqFoot.min = $sessionStorage.searchObj.sqFoot_min, sForm.sqFoot.max = $sessionStorage.searchObj.sqFoot_max, sForm.hoa = $sessionStorage.searchObj.hoa, sForm.minimum_beds = $sessionStorage.searchObj.minimum_beds, sForm.minimum_baths = $sessionStorage.searchObj.minimum_baths, sForm.garage = $sessionStorage.searchObj.garage, sForm.view = $sessionStorage.searchObj.view, sForm.waterfront = $sessionStorage.searchObj.waterfront, sForm.school_dist = $sessionStorage.searchObj.school_dist, sForm.remarks = $sessionStorage.searchObj.remarks, sForm.keywordslgopr = $sessionStorage.searchObj.keywordslgopr, sForm.parking = $sessionStorage.searchObj.parking, sForm.budget.min = $sessionStorage.searchObj.budget_min, sForm.budget.max = $sessionStorage.searchObj.budget_max, sForm.status = $sessionStorage.searchObj.status, sForm.priceReduced = $sessionStorage.searchObj.priceReduced, sForm.tos = $sessionStorage.searchObj.tos, sForm.address = $sessionStorage.searchObj.address, sForm.latitude = $sessionStorage.searchObj.latitude, sForm.longitude = $sessionStorage.searchObj.longitude, sForm.distance = $sessionStorage.searchObj.distance, sForm.bank_owned = $sessionStorage.searchObj.bank_owned, sForm.third_party_approval = $sessionStorage.searchObj.third_party_approval, sForm.auction = $sessionStorage.searchObj.auction, sForm.cr_opr = $sessionStorage.searchObj.cr_opr, sForm.cap_rate = $sessionStorage.searchObj.cap_rate, sForm.sqftopr = $sessionStorage.searchObj.sqftopr, sForm.sqft = $sessionStorage.searchObj.sqft, sForm.hot_deal_type = $sessionStorage.searchObj.hot_deal_type, sForm.terms = $sessionStorage.searchObj.terms, sForm.photosopr = $sessionStorage.searchObj.photosopr, sForm.photos = $sessionStorage.searchObj.photos, sForm.building_condition = $sessionStorage.searchObj.building_condition, sForm.fixer_upper = $sessionStorage.searchObj.fixer_upper, sForm.propStatus = $sessionStorage.searchObj.propStatus, sForm.is_validated = $sessionStorage.searchObj.is_validated, sForm.is_visible = $sessionStorage.searchObj.is_visible, sForm.list_agent_id = $sessionStorage.searchObj.list_agent_id, sForm.sell_agent_no = $sessionStorage.searchObj.sell_agent_no, sForm.apn = $sessionStorage.searchObj.apn, sForm.list_date = $sessionStorage.searchObj.list_date, sForm.status_change_date = $sessionStorage.searchObj.status_change_date, sForm.created_date = $sessionStorage.searchObj.created_date, sForm.updated_date = $sessionStorage.searchObj.updated_date, sForm.mls_no = $sessionStorage.searchObj.mls_no, admin && void 0 != $sessionStorage.searchObj.isClick && (sForm.adminBtnClicked = !0)) }, Search.prototype._dpPropList = function (reqValue) { return dpPropertyList }, Search.prototype.openProp = function (propID) { $window.open("/#!/property/" + propID) }, Search.prototype.setPref = function (status) { return SearchS.saveUsrPref(status) }, Search.prototype.openTour = function (tourUrl) { $window.open(tourUrl) }, Search.prototype.getCityZip = function (_cityZip) { return ResourceS.getCityZipCodes(_cityZip) }, Search.prototype.getSchooldDist = function (_schDist) { return ResourceS.getSchoolDistricts(_schDist) }, Search.prototype.getCommunities = function (_comm) { return ResourceS.getCommunities(_comm) }, Search.prototype.selCityZip = function (selected) { sForm.city_zip = selected ? selected.title : "" }, Search.prototype.selSchlDistrict = function (selected) { sForm.school_district = selected ? selected.title : "" }, Search.prototype.selCommunity = function (selected) { sForm.community = selected ? selected.title : "" }, Search.prototype.getResults = function () { return SearchS.index({ deal_type: sForm.deal_type, funding: sForm.funding, property_type: sForm.property_type, county: sForm.county, community: sForm.community, city_zip: sForm.city_zip, cf_opr: sForm.cf_opr, cash_flow: sForm.cash_flow, coc_opr: sForm.coc_opr, coc: sForm.coc, yearBuilt: { min: sForm.yearBuilt.min, max: sForm.yearBuilt.max }, sqFoot: { min: sForm.sqFoot.min, max: sForm.sqFoot.max }, hoa: sForm.hoa, miniBeds: sForm.minimum_beds, miniBaths: sForm.minimum_baths, garage: sForm.garage, view: sForm.view, waterfront: sForm.waterfront, school_dist: sForm.school_district, remarks: sForm.remarks, keywordslgopr: sForm.keywordslgopr, parking: sForm.parking, budget: { min: sForm.budget.min, max: sForm.budget.max }, status: sForm.status, priceReduced: sForm.priceReduced, tos: sForm.tos, address: sForm.address, latitude: sForm.latitude, longitude: sForm.longitude, distance: sForm.distance, bank_owned: sForm.bank_owned, third_party_approval: sForm.third_party_approval, auction: sForm.auction, np_opr: sForm.np_opr, net_profit: sForm.net_profit, roi_opr: sForm.roi_opr, roi: sForm.roi, cr_opr: sForm.cr_opr, cap_rate: sForm.cap_rate, sqftopr: sForm.sqftopr, sqft: sForm.sqft, hot_deal_type: sForm.hot_deal_type, terms: sForm.terms, photosopr: sForm.photosopr, photos: sForm.photos, building_condition: sForm.building_condition, fixer_upper: sForm.fixer_upper, prop_status: sForm.propStatus, is_validated: sForm.is_validated, is_visible: sForm.is_visible, list_agent_id: sForm.list_agent_id, sell_agent_no: sForm.sell_agent_no, apn: sForm.apn, list_date: sForm.list_date, status_change_date: sForm.status_change_date, created_date: sForm.created_date, updated_date: sForm.updated_date, mls_no: sForm.mls_no, style: sForm.style, isClick: sForm.btnClicked, start_index: sForm.page - 1, searchButtonClick: sForm.searchButtonClick, searchSortOrder: sForm.sortOrder, searchSortField: sForm.sortField, paidDealType: sForm.paidDealType, selectedDealType: sForm.selectedDealType, mvpAgentUserID: sForm.mvpAgentUserID }) }, Search.prototype.saveParams = function (saveObj) { return SearchS.saveSearch({ save_name: saveObj.search_name, email_me: saveObj.email_me, deal_type: sForm.deal_type, funding: sForm.funding, property_type: sForm.property_type, county: sForm.county, community: sForm.community, city_zip: sForm.city_zip, cf_opr: sForm.cf_opr, cash_flow: sForm.cash_flow, coc_opr: sForm.coc_opr, coc: sForm.coc, yearBuilt: { min: sForm.yearBuilt.min, max: sForm.yearBuilt.max }, sqFoot: { min: sForm.sqFoot.min, max: sForm.sqFoot.max }, hoa: sForm.hoa, miniBeds: sForm.minimum_beds, miniBaths: sForm.minimum_baths, garage: sForm.garage, view: sForm.view, waterfront: sForm.waterfront, school_dist: sForm.school_district, remarks: sForm.remarks, keywordslgopr: sForm.keywordslgopr, parking: sForm.parking, budget: { min: sForm.budget.min, max: sForm.budget.max }, status: sForm.status, priceReduced: sForm.priceReduced, tos: sForm.tos, address: sForm.address, latitude: sForm.latitude, longitude: sForm.longitude, distance: sForm.distance, bank_owned: sForm.bank_owned, third_party_approval: sForm.third_party_approval, auction: sForm.auction, np_opr: sForm.np_opr, net_profit: sForm.net_profit, roi_opr: sForm.roi_opr, roi: sForm.roi, cr_opr: sForm.cr_opr, cap_rate: sForm.cap_rate, sqftopr: sForm.sqftopr, sqft: sForm.sqft, hot_deal_type: sForm.hot_deal_type, terms: sForm.terms, photosopr: sForm.photosopr, photos: sForm.photos, building_condition: sForm.building_condition, fixer_upper: sForm.fixer_upper, prop_status: sForm.propStatus, is_validated: sForm.is_validated, is_visible: sForm.is_visible, list_agent_id: sForm.list_agent_id, sell_agent_no: sForm.sell_agent_no, apn: sForm.apn, list_date: sForm.list_date, status_change_date: sForm.status_change_date, created_date: sForm.created_date, updated_date: sForm.updated_date, mls_no: sForm.mls_no, total_results: sForm.totalResults }) }, Search.prototype.searchCriteriaAudit = function () { var tmp = [], data = { deal_type: sForm.deal_type, funding: sForm.funding, property_type: sForm.property_type, county: sForm.county, community: sForm.community, city_zip: sForm.city_zip, cf_opr: sForm.cf_opr, cash_flow: sForm.cash_flow, coc_opr: sForm.coc_opr, coc: sForm.coc, yearBuilt: { min: sForm.yearBuilt.min, max: sForm.yearBuilt.max }, sqFoot: { min: sForm.sqFoot.min, max: sForm.sqFoot.max }, hoa: sForm.hoa, miniBeds: sForm.minimum_beds, miniBaths: sForm.minimum_baths, garage: sForm.garage, view: sForm.view, waterfront: sForm.waterfront, school_dist: sForm.school_district, remarks: sForm.remarks, keywordslgopr: sForm.keywordslgopr, parking: sForm.parking, budget: { min: sForm.budget.min, max: sForm.budget.max }, status: sForm.status, priceReduced: sForm.priceReduced, tos: sForm.tos, address: sForm.address, latitude: sForm.latitude, longitude: sForm.longitude, distance: sForm.distance, bank_owned: sForm.bank_owned, third_party_approval: sForm.third_party_approval, auction: sForm.auction, np_opr: sForm.np_opr, net_profit: sForm.net_profit, roi_opr: sForm.roi_opr, roi: sForm.roi, cr_opr: sForm.cr_opr, cap_rate: sForm.cap_rate, sqftopr: sForm.sqftopr, sqft: sForm.sqft, hot_deal_type: sForm.hot_deal_type, terms: sForm.terms, photosopr: sForm.photosopr, photos: sForm.photos, building_condition: sForm.building_condition, fixer_upper: sForm.fixer_upper, total_results: sForm.totalResults, recentSearch: { deal_type: sForm.deal_type, funding: sForm.funding, property_type: sForm.property_type, county: sForm.county, community: sForm.community, city_zip: sForm.city_zip, cf_opr: sForm.cf_opr, cash_flow: sForm.cash_flow, coc_opr: sForm.coc_opr, coc: sForm.coc, yearBuilt: { min: sForm.yearBuilt.min, max: sForm.yearBuilt.max }, sqFoot: { min: sForm.sqFoot.min, max: sForm.sqFoot.max }, hoa: sForm.hoa, miniBeds: sForm.minimum_beds, miniBaths: sForm.minimum_baths, garage: sForm.garage, view: sForm.view, waterfront: sForm.waterfront, school_dist: sForm.school_district, remarks: sForm.remarks, keywordslgopr: sForm.keywordslgopr, parking: sForm.parking, budget: { min: sForm.budget.min, max: sForm.budget.max }, status: sForm.status, priceReduced: sForm.priceReduced, tos: sForm.tos, address: sForm.address, latitude: sForm.latitude, longitude: sForm.longitude, distance: sForm.distance, bank_owned: sForm.bank_owned, third_party_approval: sForm.third_party_approval, auction: sForm.auction, np_opr: sForm.np_opr, net_profit: sForm.net_profit, roi_opr: sForm.roi_opr, roi: sForm.roi, cr_opr: sForm.cr_opr, cap_rate: sForm.cap_rate, sqftopr: sForm.sqftopr, sqft: sForm.sqft, hot_deal_type: sForm.hot_deal_type, terms: sForm.terms, photosopr: sForm.photosopr, photos: sForm.photos, building_condition: sForm.building_condition, fixer_upper: sForm.fixer_upper } }; return data.deal_type && data.deal_type.length ? data.deal_type = data.deal_type[0].label : data.deal_type = "", data.funding && data.funding.length ? data.funding = data.funding[0].label : data.funding = "", data.property_type && data.property_type ? (tmp = [], data.property_type.forEach(function (item, index) { tmp.push(item.label) }), data.property_type = tmp.join(",")) : data.property_type = "", data.county && data.county.length ? (tmp = [], data.county.forEach(function (item, index) { tmp.push(item.label) }), data.county = tmp.join(",")) : data.county = "", data.yearBuilt.min && data.yearBuilt.min.length ? data.yearBuilt.min = data.yearBuilt.min[0] : data.yearBuilt.min = "", data.yearBuilt.max && data.yearBuilt.max.length ? data.yearBuilt.max = data.yearBuilt.max[0] : data.yearBuilt.max = "", data.sqFoot.min && data.sqFoot.min.length ? data.sqFoot.min = data.sqFoot.min[0].id : data.sqFoot.min = "", data.sqFoot.max && data.sqFoot.max.length ? data.sqFoot.max = data.sqFoot.max[0].id : data.sqFoot.max = "", data.hoa && data.hoa.length ? data.hoa = data.hoa[0].label : data.hoa = "", data.miniBeds && data.miniBeds.length ? data.miniBeds = data.miniBeds[0].label : data.miniBeds = "", data.miniBaths && data.miniBaths.length ? data.miniBaths = data.miniBaths[0].label : data.miniBaths = "", data.parking && data.parking.length ? data.parking = data.parking[0].label : data.parking = "", data.budget.min && data.budget.min.length ? data.budget.min = data.budget.min[0].id : data.budget.min = "", data.budget.max && data.budget.max.length ? data.budget.max = data.budget.max[0].id : data.budget.max = "", data.status && data.status.length ? data.status = data.status[0].label : data.status = "", data.priceReduced && data.priceReduced.length ? data.priceReduced = data.priceReduced[0].label : data.priceReduced = "", data.tos && data.tos.length ? data.tos = data.tos[0].label : data.tos = "", data.distance && data.distance.length ? data.distance = data.distance[0] : data.distance = "", data.sqftopr && data.sqftopr.length ? data.sqftopr = data.sqftopr[0] : data.sqftopr = "", data.hot_deal_type && data.hot_deal_type.length ? data.hot_deal_type = data.hot_deal_type[0].id : data.hot_deal_type = "", data.terms && data.terms.length ? (tmp = [], data.terms.forEach(function (item, index) { tmp.push(item.label) }), data.terms = tmp.join(",")) : data.terms = "", data.photosopr && data.photosopr.length ? data.photosopr = data.photosopr[0] : data.photosopr = "", data.building_condition && data.building_condition.length ? (tmp = [], data.building_condition.forEach(function (item, index) { tmp.push(item.label) }), data.building_condition = tmp.join(",")) : data.building_condition = "", data.cf_opr && data.cf_opr.length ? data.cf_opr = data.cf_opr[0] : data.cf_opr = "", data.coc_opr && data.coc_opr.length ? data.coc_opr = data.coc_opr[0] : data.coc_opr = "", data.np_opr && data.np_opr.length ? data.np_opr = data.np_opr[0] : data.np_opr = "", data.roi_opr && data.roi_opr.length ? data.roi_opr = data.roi_opr[0] : data.roi_opr = "", data.cr_opr && data.cr_opr.length ? data.cr_opr = data.cr_opr[0] : data.cr_opr = "", SearchS.saveSearchCriteriaAudit(data) }, Search.prototype.getPageLimit = function () { return SearchS.getPageLimit() }, Search.prototype.adminValidateProperty = function (customData) { return SearchS.validateProperty(customData) }, Search.prototype.findSearchNameParams = function (saveObj) { return SearchS.checkSearchName({ save_name: saveObj.search_name, email_me: saveObj.email_me, deal_type: sForm.deal_type, funding: sForm.funding, property_type: sForm.property_type, county: sForm.county, community: sForm.community, city_zip: sForm.city_zip, cf_opr: sForm.cf_opr, cash_flow: sForm.cash_flow, coc_opr: sForm.coc_opr, coc: sForm.coc, yearBuilt: { min: sForm.yearBuilt.min, max: sForm.yearBuilt.max }, sqFoot: { min: sForm.sqFoot.min, max: sForm.sqFoot.max }, hoa: sForm.hoa, miniBeds: sForm.minimum_beds, miniBaths: sForm.minimum_baths, garage: sForm.garage, view: sForm.view, waterfront: sForm.waterfront, school_dist: sForm.school_district, remarks: sForm.remarks, keywordslgopr: sForm.keywordslgopr, parking: sForm.parking, budget: { min: sForm.budget.min, max: sForm.budget.max }, status: sForm.status, priceReduced: sForm.priceReduced, tos: sForm.tos, address: sForm.address, latitude: sForm.latitude, longitude: sForm.longitude, distance: sForm.distance, bank_owned: sForm.bank_owned, third_party_approval: sForm.third_party_approval, auction: sForm.auction, np_opr: sForm.np_opr, net_profit: sForm.net_profit, roi_opr: sForm.roi_opr, roi: sForm.roi, cr_opr: sForm.cr_opr, cap_rate: sForm.cap_rate, sqftopr: sForm.sqftopr, sqft: sForm.sqft, hot_deal_type: sForm.hot_deal_type, terms: sForm.terms, photosopr: sForm.photosopr, photos: sForm.photos, building_condition: sForm.building_condition, fixer_upper: sForm.fixer_upper, prop_status: sForm.propStatus, is_validated: sForm.is_validated, is_visible: sForm.is_visible, list_agent_id: sForm.list_agent_id, sell_agent_no: sForm.sell_agent_no, apn: sForm.apn, list_date: sForm.list_date, status_change_date: sForm.status_change_date, created_date: sForm.created_date, updated_date: sForm.updated_date, mls_no: sForm.mls_no, total_results: sForm.totalResults }) }, Search }; __SearchService.$inject = ["$q", "$http", "ResourceService"], __SearchFactory.$inject = ["ResourceService", "SearchService", "$filter", "$window", "$sessionStorage"], appService.service("SearchService", __SearchService), appService.factory("SearchFac", __SearchFactory) }(), function () { "use strict"; var __PortfolioService = function ($q, $http, Rest) { return { index: function (formDataObj) { let canceller = $q.defer(); for (const request of $http.pendingRequests) request.cancel && request.cancel.resolve(); canceller.resolve(); let request = { method: "POST", url: "/api/portfolio", data: formDataObj, timeout: (canceller = $q.defer()).promise, cancel: canceller }; return $http(request).success(function (data) { canceller.resolve(data) }).error(function (reason) { canceller.reject(reason) }), canceller.promise }, getPbText: function () { var d = $q.defer(); return $http.get("api/portfolio/pbText", { cache: !0 }).success(function (data) { d.resolve(data.pbText) }).error(function (reason) { d.reject(reason) }), d.promise }, savePortfolioInputs: function (dataObj) { return Rest.all("api/portfolio/save-portfolio-inputs").post(dataObj) }, getHoldAnalysis: function (property_ID, user_ID) { return Rest.all("api/resources/hold-analysis").post({ pid: property_ID, uid: user_ID }) }, saveUserPortfolio: function (formDataObj) { var d = $q.defer(); return $http.post("/api/portfolio/save-portfolio", formDataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getUserPortfolio: function (portfolio_id, user_Id) { return Rest.all("api/portfolio/get-portfolio").post({ pid: portfolio_id, user_id: user_Id }) }, getUserPortfolioList: function (user_Id) { return Rest.all("api/portfolio/get-portfolio-list").post({ user_id: user_Id }) }, deletePortfolio: function (property_ID, user_ID) { return Rest.all("api/portfolio/delete-portfolio").post({ pid: property_ID, uid: user_ID }) }, portfolioMakeOffer: function (userObj, body, subject, to, from, successMessage, emailFailureMessage) { return Rest.all("api/portfolio/makeoffer-portfolio").post({ userObj: userObj, body: body, subject: subject, to: to, from: from, successMessage: successMessage, emailFailureMessage: emailFailureMessage }) }, loadPropertyData: function (property_id, user_id, ml_number) { var dataObj = { property_id: property_id, user_id: user_id, ml_number: ml_number }, d = $q.defer(); return $http.post("/api/portfolio/load-portfolio-data", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getInvestorInterestLevel: function () { var d = $q.defer(); return $http.get("/api/portfolio/investor-interest-level").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getInvestorInterest: function (property_id) { return Rest.all("api/portfolio/get-investor-interest").post({ property_id: property_id }) }, checkPortfolioCreationLimit: function (user_id) { return Rest.all("api/portfolio/check-portfolio-limit").post({ user_id: user_id }) }, getEmailTemplate: function () { return Rest.all("api/portfolio/get-email-template").post() }, updatePortfolioInputs: function (dataObj) { return Rest.all("api/portfolio/update-portfolio-inputs").post(dataObj) } } }, __PortfolioFactory = function (ResourceS, PortfolioS, $filter, $window) { var sForm = null, dpPropertyList = { single_family: "Single Family", manufactured: "Manufactured", floating_home: "Floating Home", townhouse: "Townhouse", multi_family: "Multi-Family", condo: "Condo", other: "Other" }, propertyTypeList = [{ style: "11 - 1 1/2 Story", disp_value: "Single Family" }, { style: "12 - 2 Story", disp_value: "Single Family" }, { style: "13 - Tri-Level", disp_value: "Single Family" }, { style: "14 - Split Entry", disp_value: "Single Family" }, { style: "15 - Multi Level", disp_value: "Single Family" }, { style: "16 - 1 Story w/Bsmnt.", disp_value: "Single Family" }, { style: "17 - 1 1/2 Stry w/Bsmt", disp_value: "Single Family" }, { style: "18 - 2 Stories w/Bsmnt", disp_value: "Single Family" }, { style: "20 - Manuf-Single Wide", disp_value: "Manufactured" }, { style: "21 - Manuf-Double Wide", disp_value: "Manufactured" }, { style: "22 - Manuf-Triple Wide", disp_value: "Manufactured" }, { style: "24 - Floating Home/On-Water Res", disp_value: "Floating Home" }, { style: "32 - Townhouse", disp_value: "Townhouse" }, { style: "52 - Duplex", disp_value: "Multi-Family" }, { style: "54 - 4-Plex", disp_value: "Multi-Family" }, { style: "55 - 5-9 Units", disp_value: "Multi-Family" }, { style: "30 - Condo (1 Level)", disp_value: "Condo" }, { style: "31 - Condo (2 Levels", disp_value: "Condo" }, { style: "33 - Co-op", disp_value: "Condo" }, { style: "34 - Condo (3 Levels)", disp_value: "Condo" }, { style: "35 - Garage Storage", disp_value: "Condo" }, { style: "45 - Moorage", disp_value: "Condo" }]; function Portfolio(vmsForm) { sForm = vmsForm } return Portfolio.prototype._propType = function (reqValue) { var property_type = ""; for (var i in propertyTypeList) if (propertyTypeList[i].style == reqValue) { property_type = propertyTypeList[i].disp_value; break } return property_type }, Portfolio.prototype._dpPropList = function (reqValue) { var type = ["single_family", "townhouse", "multi_family", "condo"], ddList = {}; return angular.forEach(dpPropertyList, function (val, key) { type.indexOf(key) > -1 && (ddList[key] = val) }), ddList }, Portfolio.prototype.openProp = function (propID) { $window.location = "/#!/property/" + propID }, Portfolio.prototype.openPortfolio = function (portfolioID) { $window.location.href = "/#!/my-portfolio-detail/" + portfolioID }, Portfolio.prototype.getCityZip = function (_cityZip) { return ResourceS.getCityZipCodes(_cityZip) }, Portfolio.prototype.getSchooldDist = function (_schDist) { return ResourceS.getSchoolDistricts(_schDist) }, Portfolio.prototype.getCommunities = function (_comm) { return ResourceS.getCommunities(_comm) }, Portfolio.prototype.selCityZip = function (selected) { sForm.city_zip = selected ? selected.title : "" }, Portfolio.prototype.selSchlDistrict = function (selected) { sForm.school_district = selected ? selected.title : "" }, Portfolio.prototype.selCommunity = function (selected) { sForm.community = selected ? selected.title : "" }, Portfolio.prototype.getResults = function () { return PortfolioS.index({ county: sForm.county, city_zip: sForm.city_zip, style: sForm.style, funding: sForm.funding, deal_type: sForm.deal_type, community: sForm.community, school_dist: sForm.school_district, miniBeds: sForm.minimum_beds, minBaths: sForm.minimum_baths, cash_flow: sForm.cash_flow, coc: sForm.coc, roi: sForm.roi, net_profit: sForm.net_profit, cap_rate: sForm.cap_rate, hot_deal_type: sForm.hot_deal_type, mls_no: sForm.mls_no, prop_status: sForm.propStatus, budget: { min: sForm.budget.min, max: sForm.budget.max }, yearBuilt: { min: sForm.yearBuilt.min, max: sForm.yearBuilt.max }, sqFoot: { min: sForm.sqFoot.min, max: sForm.sqFoot.max }, list_from: sForm.list_from, list_to: sForm.list_to, property_type: sForm.property_type, isClick: sForm.btnClicked }) }, Portfolio.prototype.getPbTextObj = function () { return PortfolioS.getPbText() }, Portfolio.prototype.savePBInputs = function (data) { return PortfolioS.savePortfolioInputs(data) }, Portfolio.prototype.savePortfolio = function (data) { return PortfolioS.saveUserPortfolio(data) }, Portfolio.prototype.getPortfolio = function (portfolio_id, user_id) { return PortfolioS.getUserPortfolio(portfolio_id, user_id) }, Portfolio.prototype.getPortfolioList = function (user_id) { return PortfolioS.getUserPortfolioList(user_id) }, Portfolio.prototype.updatePBInputs = function (data) { return PortfolioS.updatePortfolioInputs(data) }, Portfolio }; __PortfolioService.$inject = ["$q", "$http", "Restangular"], __PortfolioFactory.$inject = ["ResourceService", "PortfolioService", "$filter", "$window"], appService.service("PortfolioService", __PortfolioService), appService.factory("PortfolioFac", __PortfolioFactory) }(), function () { "use strict"; var __EmailTemplateService = function (Rest, $window) { return { getAllEmailTemplate: function () { return Rest.all("api/emailtemplate/get-all-email-template").post() }, loadTemplate: function (template_id) { return Rest.all("api/emailtemplate/get-email-template").post({ template_id: template_id }) }, updateTemplate: function (dataObj) { return dataObj.modified_at = new Date, Rest.all("api/emailtemplate/update-email-template").post(dataObj) } } }, __EmailTemplateFactory = function (ResourceS, PortfolioS, $filter, $window) { }; __EmailTemplateService.$inject = ["Restangular", "$window"], __EmailTemplateFactory.$inject = ["PortfolioService"], appService.service("EmailTemplateService", __EmailTemplateService), appService.factory("EmailTemplateFac", __EmailTemplateFactory) }(), function () { "use strict"; appService.factory("PropertyCalculationFac", function () { function PropertyCalculation(vmScope) { vmScope.pP } PropertyCalculation.prototype.getAmortizationSchedule = function (propInfo) { var amortgage_data = [], balance = propInfo.pCust.offer_price_hold, turnover_year = propInfo.bRule.default_tenant_turnover_value; "" !== balance && 0 !== balance || (balance = propInfo.list_price); var main_offer_price = balance = balance ? parseFloat(balance) : 0; balance -= propInfo.pCust.down_payment; var periods = 12 * propInfo.pCust.mortgage_years, monthlyRate = propInfo.pCust.mortgage_interest / 100 / 12, monthy_Payment = monthlyRate / (1 - Math.pow(1 + monthlyRate, -periods)) * balance, index = 1, rent_amount = propInfo.pCust.rent_high ? parseFloat(propInfo.pCust.rent_high) : 0, other_income = propInfo.pCust.other_income; "" !== other_income && void 0 !== other_income || (other_income = 0); for (var cum_payments = 0, cum_interest = 0, cum_principal = 0, cum_extra_pay = 0, rent_percentage = 0, value_appreciation_percent = 0, expense_inflation_percent = 0, property_tax = propInfo.pCust.property_tax ? parseFloat(propInfo.pCust.property_tax) : 0, property_insurance = propInfo.pCust.property_insurance ? parseFloat(propInfo.pCust.property_insurance.toFixed(2)) : 0, hoa = propInfo.pCust.association_fees ? parseFloat(propInfo.pCust.association_fees) : 0, property_management = propInfo.pCust.property_management ? parseFloat(propInfo.pCust.property_management) : 0, maintainance = propInfo.pCust.maintenance_cost_hold ? parseFloat(propInfo.pCust.maintenance_cost_hold) : 0, other_expense = propInfo.pCust.other_expense ? parseFloat(propInfo.pCust.other_expense) : 0, contingency = propInfo.pCust.contingency ? parseFloat(propInfo.pCust.contingency) : 0, vacancy = 0, operating_income = 0, cash_flow = 0, cumulative_cash_flow = 0, value_appreciated = main_offer_price, yoy_appreciation = 0, yoy_cum_appreciation = 0, yoy_cum_appreciation_root = 0, cum_rent = 0, cum_vacancy = 0, cum_operating_income = 0, cum_property_tax = 0, cum_property_insurance = 0, cum_hoa = 0, cum_property_management = 0, cum_maintainance = 0, cum_total_m_expense = 0, cum_net_operating_income = 0, turnover_expenses = 0, amortizationCalc = function () { var interestForMonth = balance * monthlyRate, flag_last_emi = 0; balance < monthy_Payment ? (monthy_Payment = interestForMonth + balance, flag_last_emi = 1) : balance == monthy_Payment && (flag_last_emi = 1); var principalForMonth = monthy_Payment - interestForMonth; balance -= principalForMonth, cum_payments += monthy_Payment, cum_interest += interestForMonth, cum_principal += principalForMonth, rent_percentage = index % 12 == 1 ? switchCalculations(propInfo, "get_rent_percentage", params_arr = { current_month: index }) : 0; var params_arr = { amount: rent_amount = switchCalculations(propInfo, "get_percentage_added", params_arr = { amount: rent_amount, percent: rent_percentage }), percent: propInfo.pCust.default_vacancy }; if (vacancy = index <= 12 ? 0 : switchCalculations(propInfo, "get_percentage_only", params_arr), operating_income = rent_amount - vacancy, expense_inflation_percent = index % 12 == 1 ? switchCalculations(propInfo, "get_inflation_percentage", params_arr = { current_month: index }) : 0, property_tax = switchCalculations(propInfo, "get_percentage_added", params_arr = { amount: property_tax, percent: expense_inflation_percent }), property_insurance = switchCalculations(propInfo, "get_percentage_added", params_arr = { amount: property_insurance, percent: expense_inflation_percent }), hoa = switchCalculations(propInfo, "get_percentage_added", params_arr = { amount: hoa, percent: expense_inflation_percent }), property_management = switchCalculations(propInfo, "get_percentage_added", params_arr = { amount: property_management, percent: expense_inflation_percent }), maintainance = switchCalculations(propInfo, "get_percentage_added", params_arr = { amount: maintainance, percent: expense_inflation_percent }), index % 12 == 0) var month = 12; else month = index % 12; var total_m_expenses = property_tax + property_insurance + hoa + property_management + maintainance + other_expense + contingency + (turnover_expenses = index > 1 && 1 === month && index % (12 * turnover_year) == 1 ? .5 * rent_amount : 0), net_operating_income = operating_income - total_m_expenses; cash_flow = net_operating_income - monthy_Payment; var extra_pay = 0, is_re_invest = "yes" === propInfo.bRule.default_reinvest_cashflow_value; 0 == flag_last_emi && cash_flow > 0 && 1 == is_re_invest ? balance -= extra_pay = balance >= cash_flow ? cash_flow : balance : extra_pay = 0, cum_extra_pay += extra_pay, cumulative_cash_flow += cash_flow, value_appreciation_percent = index % 12 == 0 ? switchCalculations(propInfo, "get_value_appreciation_percentage", params_arr = { current_month: index }) : 0; var last_appriciated_value = value_appreciated; value_appreciated = switchCalculations(propInfo, "get_percentage_added", params_arr = { amount: value_appreciated, percent: value_appreciation_percent }), index % 12 == 0 ? yoy_cum_appreciation = yoy_cum_appreciation_root += yoy_appreciation = value_appreciated - last_appriciated_value : (yoy_appreciation = 0, yoy_cum_appreciation = 0), cum_rent += rent_amount, cum_vacancy += vacancy, cum_operating_income += operating_income, cum_property_tax += property_tax, cum_property_insurance += property_insurance, cum_hoa += hoa, cum_property_management += property_management, cum_maintainance += maintainance, cum_total_m_expense += total_m_expenses, cum_net_operating_income += net_operating_income; var year = Math.ceil(index / 12), year_text = ""; index % 12 == 1 ? year_text = year + " Start" : index % 12 == 0 && (year_text = year + " End"), 1 == flag_last_emi && (year_text = year + " End"), 1 == flag_last_emi && index % 12 == 1 && (year_text = year + " Start & End"); var row_data = { index: index, month: month, year: year, year_text: year_text, cum_rent: cum_rent, cum_vacancy: cum_vacancy, cum_hoa: cum_hoa, cum_operating_income: cum_operating_income, cum_property_tax: cum_property_tax, cum_property_insurance: cum_property_insurance, cum_property_management: cum_property_management, cum_maintainance: cum_maintainance, cum_total_m_expense: cum_total_m_expense, cum_net_operating_income: cum_net_operating_income, yoy_cum_appreciation: yoy_cum_appreciation, yoy_appreciation: yoy_appreciation, value_appreciated: value_appreciated, value_appreciation_percent: value_appreciation_percent, cash_flow: cash_flow, cumulative_cash_flow: cumulative_cash_flow, net_operating_income: net_operating_income, total_m_expenses: total_m_expenses, hoa: hoa, maintainance: maintainance, property_management: property_management, expense_inflation_percent: expense_inflation_percent, property_insurance: property_insurance, property_tax: property_tax, operating_income: operating_income, vacancy: vacancy, rent_percentage: rent_percentage, rent_amount: rent_amount, other_income: other_income, cum_payments: cum_payments, cum_interest: cum_interest, cum_principal: cum_principal, cum_extra_pay: cum_extra_pay, emi: monthy_Payment, extra_pay: extra_pay, interest: interestForMonth, principal: principalForMonth, balance: balance, leasing_fee: 0, turnover_expenses: turnover_expenses }; amortgage_data.push(row_data), index++ }, i = 0; i < 360; i++)amortizationCalc(); return amortgage_data }, PropertyCalculation.prototype.getReadinessCalculation = function (propInfo) { var readiness_data = [], balance = propInfo.pCust.offer_price_hold, turnover_year = propInfo.bRule.default_tenant_turnover_value; "" !== balance && 0 !== balance || (balance = propInfo.list_price); var main_offer_price = balance = balance ? parseFloat(balance) : 0; balance -= propInfo.pCust.down_payment; var periods = 12 * propInfo.pCust.mortgage_years, monthlyRate = propInfo.pCust.mortgage_interest / 100 / 12, monthy_Payment = monthlyRate / (1 - Math.pow(1 + monthlyRate, -periods)) * balance, index = 1, rent_amount = propInfo.pCust.rent_high ? parseFloat(propInfo.pCust.rent_high) : 0, other_income = propInfo.pCust.other_income; "" !== other_income && void 0 !== other_income || (other_income = 0); for (var rent_percentage = 0, value_appreciation_percent = 0, expense_inflation_percent = 0, property_tax = propInfo.pCust.property_tax ? parseFloat(propInfo.pCust.property_tax) : 0, property_insurance = propInfo.pCust.property_insurance ? parseFloat(propInfo.pCust.property_insurance.toFixed(2)) : 0, hoa = propInfo.pCust.association_fees ? parseFloat(propInfo.pCust.association_fees) : 0, property_management = propInfo.pCust.property_management ? parseFloat(propInfo.pCust.property_management) : 0, maintainance = propInfo.pCust.maintenance_cost_hold ? parseFloat(propInfo.pCust.maintenance_cost_hold) : 0, other_expense = propInfo.pCust.other_expense ? parseFloat(propInfo.pCust.other_expense) : 0, contingency = propInfo.pCust.contingency ? parseFloat(propInfo.pCust.contingency) : 0, vacancy = 0, operating_income = 0, cash_flow = 0, value_appreciated = main_offer_price, turnover_expenses = 0, cash_flow_copy = 0, readinessCalc = function () { var interestForMonth = balance * monthlyRate, flag_last_emi = 0, year = Math.ceil(index / 12); balance < monthy_Payment ? (monthy_Payment = interestForMonth + balance, flag_last_emi = 1) : balance == monthy_Payment && (flag_last_emi = 1); var principalForMonth = monthy_Payment - interestForMonth; balance -= principalForMonth, rent_percentage = index % 12 == 1 ? switchCalculations(propInfo, "get_rent_percentage", params_arr = { current_month: index }) : 0; var params_arr = { amount: rent_amount = switchCalculations(propInfo, "get_percentage_added", params_arr = { amount: rent_amount, percent: rent_percentage }), percent: propInfo.pCust.default_vacancy }; if (vacancy = index <= 12 ? 0 : switchCalculations(propInfo, "get_percentage_only", params_arr), operating_income = rent_amount - vacancy, expense_inflation_percent = index % 12 == 1 ? switchCalculations(propInfo, "get_inflation_percentage", params_arr = { current_month: index }) : 0, property_tax = switchCalculations(propInfo, "get_percentage_added", params_arr = { amount: property_tax, percent: expense_inflation_percent }), property_insurance = switchCalculations(propInfo, "get_percentage_added", params_arr = { amount: property_insurance, percent: expense_inflation_percent }), hoa = switchCalculations(propInfo, "get_percentage_added", params_arr = { amount: hoa, percent: expense_inflation_percent }), property_management = switchCalculations(propInfo, "get_percentage_added", params_arr = { amount: property_management, percent: expense_inflation_percent }), maintainance = switchCalculations(propInfo, "get_percentage_added", params_arr = { amount: maintainance, percent: expense_inflation_percent }), index % 12 == 0) var month = 12; else month = index % 12; var net_operating_income, total_m_expenses = property_tax + property_insurance + hoa + property_management + maintainance + other_expense + contingency + (turnover_expenses = index > 1 && 1 === month && index % (12 * turnover_year) == 1 ? .5 * rent_amount : 0), net_operating_income_copy = operating_income - total_m_expenses; cash_flow = index < parseInt(propInfo.bRule.default_readiness_months_value) + 1 ? (net_operating_income = (operating_income = 0) - total_m_expenses) - monthy_Payment : (net_operating_income = (operating_income = rent_amount - vacancy + other_income) - total_m_expenses) - monthy_Payment, cash_flow_copy = net_operating_income_copy - monthy_Payment; var is_re_invest = "yes" === propInfo.bRule.default_reinvest_cashflow_value; 0 == flag_last_emi && cash_flow_copy > 0 && 1 == is_re_invest && (balance -= balance >= cash_flow_copy ? cash_flow_copy : balance), value_appreciation_percent = index % 12 == 0 ? switchCalculations(propInfo, "get_value_appreciation_percentage", params_arr = { current_month: index }) : 0, value_appreciated = switchCalculations(propInfo, "get_percentage_added", params_arr = { amount: value_appreciated, percent: value_appreciation_percent }); var row_data = { month: month, year: year, rent_amount: rent_amount, operating_income: operating_income, interest: interestForMonth, principal: principalForMonth, emi: monthy_Payment, property_tax: property_tax, property_insurance: property_insurance, hoa: hoa, leasing_fee: 0, property_management: property_management, total_m_expenses: total_m_expenses, net_operating_income: net_operating_income, cash_flow: cash_flow, vacancy: vacancy, other_income: other_income, maintainance: maintainance, turnover_expenses: turnover_expenses }; readiness_data.push(row_data), index++ }, readinessMonth = parseInt(propInfo.bRule.default_readiness_months_value) + 1, i = 0; i < readinessMonth; i++)readinessCalc(); return readiness_data }; var switchCalculations = function (propInfo, key, params_arr) { if ("get_percentage_added" == key) { var amt = params_arr.amount * (params_arr.percent / 100); return params_arr.amount + amt } if ("get_percentage_only" == key) return params_arr.amount * (params_arr.percent / 100); if ("get_rent_percentage" == key) { var year = Math.ceil(params_arr.current_month / 12), rent_increase_primary = propInfo.bRule.default_rent_increase_primary, rent_increase_secondary = propInfo.bRule.default_rent_increase_secondary, ret = 0; return 1 == year ? ret : --year <= 3 ? rent_increase_primary : rent_increase_secondary } if ("get_inflation_percentage" == key) { year = Math.ceil(params_arr.current_month / 12); var infaltion_primary = propInfo.bRule.default_expense_increase_primary, infaltion_secondary = propInfo.bRule.default_expense_increase_secondary; return ret = 0, 1 == year ? ret : --year <= 3 ? infaltion_primary : infaltion_secondary } if ("get_value_appreciation_percentage" == key) { year = Math.ceil(params_arr.current_month / 12); var appriciation_primary = propInfo.bRule.default_home_value_appreciation_primary, appriciation_secondary = propInfo.bRule.default_home_value_appreciation_secondary; return ret = 0, year <= 3 ? appriciation_primary : appriciation_secondary } }; return PropertyCalculation.prototype.depreciationCalculations = function (propInfo, amortgage_data) { var dep_perc, down_payment_depreciation, dep_day, dep_month, getDepreciationObj, numberOfDaysToAdd, today = new Date; return ("" === (down_payment_depreciation = parseFloat(propInfo.pCust.default_down_payment)) || isNaN(down_payment_depreciation)) && (down_payment_depreciation = 0), numberOfDaysToAdd = 100 === down_payment_depreciation ? propInfo.bRule.default_closingday_allcash_value : 7 * propInfo.bRule.default_weeks_to_close_value, today.setDate(today.getDate() + numberOfDaysToAdd), dep_day = today.getDate(), dep_month = today.getMonth(), dep_perc = 0, void 0 != propInfo.gds && (dep_perc = dep_day <= 15 ? (getDepreciationObj = propInfo.gds[dep_month]) && getDepreciationObj.depreciation_perc : (getDepreciationObj = propInfo.gds[dep_month + 1]) && getDepreciationObj.depreciation_perc), dep_perc * propInfo.pCust.offer_price_hold / 100 }, PropertyCalculation.prototype.getYOYReports = function (propInfo, amortgage_data) { var turnover_year, balance, main_offer_price, fix_up_rate, yoy_return_data = [], rent_income = 0, other_income = 0, vacancy = 0, property_tax = 0, property_insurance = 0, hoa = 0, property_management = 0, maintainance = 0, leasing_fee = 0, principal = 0, interest = 0, turnover_expenses = 0, operating_income = 0, total_operating_expenses = 0, net_operating_income = 0, mortgage_payments = 0, cash_flow = 0, cap_rate_purchase_price = 0, cap_rate_market_value = 0, d = propInfo; turnover_year = propInfo.bRule.default_tenant_turnover_value, "" != (balance = d.pCust.offer_price_hold) && 0 != balance || (balance = d.list_price), main_offer_price = balance = parseFloat(balance), fix_up_rate = d.pCust.estimated_repairs_hold; for (var dep_percentage_value, market_value = 0, yoy_appreciation = 0, return_on_equity = 0, loan_principal = 0, re_invest_cash_flow = 0, loan_balance = 0, equity = 0, loan_to_value_ratio = 0, potential_cash_out = 0, selling_cost = 0, proceed_after_sale = 0, investment_needed = 0, contingency = d.pCust.contingency ? 12 * parseFloat(d.pCust.contingency) : 0, other_expense = d.pCust.other_expense ? 12 * parseFloat(d.pCust.other_expense) : 0, cumulative_cash_flow = 0, cumulative_principal = 0, cum_yoy_appreciation = 0, i = 1; i <= amortgage_data.length; i++) { var year = Math.ceil(i / 12); if (i % 12 == 0 || i == amortgage_data.length) { operating_income = (rent_income += amortgage_data[i - 1].rent_amount) - (vacancy += amortgage_data[i - 1].vacancy) + (other_income += amortgage_data[i - 1].other_income), property_tax += amortgage_data[i - 1].property_tax, property_insurance += amortgage_data[i - 1].property_insurance, hoa += amortgage_data[i - 1].hoa, property_management += amortgage_data[i - 1].property_management, maintainance += amortgage_data[i - 1].maintainance, cum_yoy_appreciation += yoy_appreciation += amortgage_data[i - 1].yoy_appreciation, dep_percentage_value = 1 == year ? PropertyCalculation.prototype.depreciationCalculations(propInfo) : year > 1 && year < 28 ? propInfo.bRule.default_depreciation * propInfo.pCust.offer_price_hold / 100 : 28 === year ? propInfo.bRule.default_depreciation / 2 * propInfo.pCust.offer_price_hold / 100 : 0, cash_flow = (net_operating_income = operating_income - (total_operating_expenses = property_tax + property_insurance + hoa + property_management + maintainance + (leasing_fee += 0) + (turnover_expenses = year > 1 && year % turnover_year == 1 ? rent_income / 12 * .5 : 0) + contingency + other_expense)) - (mortgage_payments = (principal += amortgage_data[i - 1].principal) + (interest += amortgage_data[i - 1].interest)), cap_rate_purchase_price = net_operating_income / (main_offer_price + fix_up_rate), cap_rate_purchase_price *= 100, void 0 === amortgage_data[i] ? (market_value = amortgage_data[i - 1].value_appreciated, amortgage_data[i - 1].yoy_cum_appreciation) : (market_value = amortgage_data[i].value_appreciated, amortgage_data[i].yoy_cum_appreciation), cumulative_cash_flow += cash_flow, cumulative_principal += principal, cap_rate_market_value = net_operating_income / (market_value + fix_up_rate), cap_rate_market_value *= 100, return_on_equity = cash_flow / (market_value - amortgage_data[i - 1].balance), return_on_equity *= 100, re_invest_cash_flow = cash_flow > 0 ? cash_flow : 0, loan_principal = principal, equity = market_value - (loan_balance = amortgage_data[i - 1].balance), loan_to_value_ratio = loan_balance / market_value, potential_cash_out = (loan_to_value_ratio *= 100) < d.bRule.default_ltv_refinance ? .9 * (market_value * d.bRule.default_ltv_refinance / 100 - loan_balance) : 0, proceed_after_sale = market_value - (loan_balance + (selling_cost = market_value * (propInfo.bRule.default_cost_sale / 100))), propInfo.pCust.buying_cost_new || (propInfo.pCust.buying_cost_new = propInfo.pCust.buying_cost); var row_data = { year: year, rent_income: rent_income, vacancy: vacancy, other_income: other_income, operating_income: operating_income, property_tax: property_tax, property_insurance: property_insurance, hoa: hoa, property_management: property_management, maintainance: maintainance, leasing_fee: leasing_fee, turnover_expenses: turnover_expenses, total_operating_expenses: total_operating_expenses, net_operating_income: net_operating_income, principal: principal, interest: interest, mortgage_payments: mortgage_payments, cash_flow: cash_flow, cap_rate_purchase_price: cap_rate_purchase_price, market_value: market_value, cap_rate_market_value: cap_rate_market_value, coc_returns: cash_flow / (investment_needed = main_offer_price * (propInfo.pCust.default_down_payment / 100) + propInfo.pCust.buying_cost_new + fix_up_rate) * 100, return_on_equity: return_on_equity, loan_principal: loan_principal, re_invest_cash_flow: re_invest_cash_flow, loan_balance: loan_balance, equity: equity, loan_to_value_ratio: loan_to_value_ratio, potential_cash_out: potential_cash_out, selling_cost: selling_cost, proceed_after_sale: proceed_after_sale, investment_needed: investment_needed, net_profit: proceed_after_sale + cash_flow - investment_needed, appreciation: yoy_appreciation, cumulative_appreciation: cum_yoy_appreciation, cumulative_principal: cumulative_principal, cumulative_cash_flow: cumulative_cash_flow, depreciation: dep_percentage_value, other_expense: other_expense, contingency: contingency }; yoy_return_data.push(row_data), rent_income = 0, vacancy = 0, other_income = 0, property_tax = 0, property_insurance = 0, hoa = 0, property_management = 0, maintainance = 0, leasing_fee = 0, principal = 0, interest = 0, yoy_appreciation = 0 } else rent_income += amortgage_data[i - 1].rent_amount, vacancy += amortgage_data[i - 1].vacancy, other_income += amortgage_data[i - 1].other_income, turnover_expenses = 0, property_tax += amortgage_data[i - 1].property_tax, property_insurance += amortgage_data[i - 1].property_insurance, hoa += amortgage_data[i - 1].hoa, property_management += amortgage_data[i - 1].property_management, maintainance += amortgage_data[i - 1].maintainance, leasing_fee += 0, principal += amortgage_data[i - 1].principal, interest += amortgage_data[i - 1].interest, yoy_appreciation += amortgage_data[i - 1].yoy_appreciation } return yoy_return_data }, PropertyCalculation.prototype.getTotalSavings = function (propInfo, amortgage_data) { var loan_term, original_principal, balance, periods, monthlyRate, monthy_Payment, interest = 0, principal = 0, extra_pay = 0; loan_term = propInfo.pCust.mortgage_years, original_principal = propInfo.pCust.offer_price_hold * (100 - propInfo.pCust.default_down_payment) / 100, "" !== (balance = propInfo.pCust.offer_price_hold) && 0 !== balance || (balance = propInfo.list_price), balance = parseFloat(balance), balance -= propInfo.pCust.down_payment, periods = 12 * loan_term, monthy_Payment = (monthlyRate = propInfo.pCust.mortgage_interest / 100 / 12) / (1 - Math.pow(1 + monthlyRate, -periods)) * balance; for (var i = 1; i <= amortgage_data.length; i++)interest += amortgage_data[i - 1].interest, principal += amortgage_data[i - 1].principal, extra_pay += amortgage_data[i - 1].extra_pay; return (12 * loan_term * monthy_Payment - original_principal - (interest + principal + extra_pay - (principal + extra_pay))).toFixed(0) }, PropertyCalculation }) }(), function () { "use strict"; var e = function (e, t) { return { GetPager: function (e, currentPage, num_range = 10) { currentPage = currentPage || 1; var pagination_range = num_range, totalPages = Math.ceil(e / 20), startPage = 1, endPage = 1; pagination_range >= totalPages ? (startPage = 1, endPage = totalPages) : Math.ceil(num_range / 2 + 1) >= currentPage ? (startPage = 1, endPage = pagination_range) : currentPage + Math.ceil(num_range / 2 - 1) >= totalPages ? (startPage = totalPages - (num_range - 1), endPage = totalPages) : (startPage = currentPage - Math.ceil(num_range / 2), endPage = currentPage + Math.ceil(num_range / 2 - 1)); var c = (currentPage - 1) * pagination_range, g = Math.min(c + pagination_range - 1, e - 1), s = _.range(startPage, endPage + 1); return { totalItems: e, currentPage: currentPage, pageSize: 20, totalPages: Math.ceil(e / 20), startPage: startPage, endPage: endPage, startIndex: c, endIndex: g, pages: s, showing: 1 === currentPage ? "1-" + (1 === s.length ? e : 20) : s.length === currentPage ? e - (e - 20 * (currentPage - 1)) + 1 + "-" + e : 1 != currentPage ? 20 * (currentPage - 1) + 1 + "-" + 20 * currentPage : "" } } } }; e.$inject = [], appService.service("PagerService", e) }(), function () { "use strict"; var __MessageService = function (ngToast) { return { create: function (type, message, timeout) { var contentMessage, classname = type; contentMessage = "success" == type ? '<i class="fa fa-check-circle-o" aria-hidden="true"></i> ' + message : '<i class="fa fa-times-circle-o" aria-hidden="true"></i> ' + message, ngToast.create({ content: contentMessage, dismissOnTimeout: !0, dismissButton: !0, dismissOnClick: !1, timeout: 4e3, className: classname, combineDuplications: !0 }) }, cancelToast: function () { ngToast.dismiss() }, showMessage: function (title, message, messageType, callback) { null == callback && (callback = function () { }), messageType = void 0 === messageType ? "warning" : "success", swal({ title: title, text: message, type: messageType }, callback) }, confirmAlert: function (callback, title, message, confirmText, cancelText, showCancelButton) { title = void 0 === title ? "Are you sure?" : title, message = void 0 === message ? "You will not be able to undo this." : message, confirmText = void 0 === confirmText ? "Yes, delete it!" : confirmText, showCancelButton = void 0 === showCancelButton || showCancelButton, swal({ title: title, text: message, type: "warning", showCancelButton: showCancelButton, confirmButtonColor: "#e74c3c", confirmButtonText: confirmText, cancelButtonText: cancelText, closeOnConfirm: !0 }, callback) }, promptAlert: function (callback, title, text, confirmText, showCancelButton, closeOnConfirm, inputPlaceholder) { swal({ title: title, text: text, type: "input", showCancelButton: !0, closeOnConfirm: !1, inputPlaceholder: "Enter here", showLoaderOnConfirm: !0, confirmButtonText: confirmText }, callback) }, showErrorMessage: function (title, message, messageType, callback) { null == callback && (callback = function () { }), messageType = void 0 === messageType ? "warning" : messageType, swal({ title: title, text: message, type: messageType }, callback) }, showMessageNew: function (params) { let { title: title = "", text: text = "", type: type = "success", callback: callback, showConfirmButton: showConfirmButton = !0 } = params; null == callback && (callback = function () { }), swal({ title: title, text: text, html: !0, type: type, showConfirmButton: showConfirmButton }, callback) } } }; __MessageService.$inject = ["ngToast"], appService.service("MessageService", __MessageService) }(), function () { "use strict"; var __AdminDashboardService = function ($q, $http) { return { userDashboard: function () { var d = $q.defer(); return $http.get("api/resources/users-dashboard").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, adminDashboard: function () { var d = $q.defer(); return $http.get("api/resources/admin-dashboard").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, mvpClientDashboard: function () { var d = $q.defer(); return $http.get("api/resources/mvp-clients-dashboard").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, agentReferralDashboard: function () { var d = $q.defer(); return $http.get("api/resources/agent-referral-dashboard").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, saveAgentLog: function (client_id) { var d = $q.defer(); return $http.post("api/resources/save-agent-user-activity", { client_id: client_id }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getClientDetails: function (client_id) { var d = $q.defer(); return $http.post("api/resources/get-client-details", { client_id: client_id }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getMvpClients: function (client_id) { var d = $q.defer(); return $http.post("api/resources/get-mvp-clients", { client_id: client_id }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, mvpClientSearchDashboard: function (user_id) { var d = $q.defer(); return $http.post("api/search/get-user-searches", { user_id: user_id }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, mvpClientPropertySavedDashboard: function (user_id) { var d = $q.defer(); return $http.post("api/resources/user-saved-properties", { user_id: user_id }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, mvpClientPropertyFavDashboard: function (user_id) { var d = $q.defer(); return $http.post("api/resources/user-fav-properties", { user_id: user_id }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, mvpClientPropertySeenDashboard: function (user_id) { var d = $q.defer(); return $http.post("api/resources/user-seen-properties", { user_id: user_id }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, mvpClientPropertyHideDashboard: function (user_id) { var d = $q.defer(); return $http.post("api/resources/user-hide-properties", { user_id: user_id }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, mvpClientPortfolioDashboard: function (user_id) { var d = $q.defer(); return $http.post("api/resources/user-portfolio", { user_id: user_id }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, mvpClientAutoemailDashboard: function (user_id) { var d = $q.defer(); return $http.post("api/resources/user-autoemails", { user_id: user_id }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise } } }; __AdminDashboardService.$inject = ["$q", "$http"], appService.service("AdminDashboardService", __AdminDashboardService) }(), function () { "use strict"; appService.service("EmailAutomationService", function ($q, $http) { return { getContacts: function () { var d = $q.defer(); return $http.get("api/emailautomation/get-contacts").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getTemplates: function (template_for, actual_template_name = null) { var d = $q.defer(); return $http.post("api/emailautomation/get-templates", { template_for: template_for, actual_template_name: actual_template_name }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getSavedSearch: function (id) { var d = $q.defer(); return $http.post("api/emailautomation/get-saved-search", { search_id: id }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, saveAutoEmail: function (fields) { var d = $q.defer(); return $http.post("api/emailautomation/save-auto-email", fields).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, saveEmailListingAgent: function (fields) { var d = $q.defer(); return $http.post("api/emailautomation/save-email-listing-agent", fields).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, saveDirectEmail: function (fields) { var d = $q.defer(); return $http.post("api/emailautomation/queue-direct-email", fields).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, saveBrokerEmail: function (fields) { var d = $q.defer(); return $http.post("api/emailautomation/save-broker-email", fields).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, deleteAutoEmail: function (id) { var d = $q.defer(); return $http.post("api/emailautomation/delete-auto-email", { id: id }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getAutoEmail: function (id) { var d = $q.defer(); return $http.post("api/emailautomation/get-auto-email", { id: id }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getContactCategories: function (id) { var d = $q.defer(); return $http.post("api/emailautomation/get-contacts-categories").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getListingAgentCategories: function () { var d = $q.defer(); return $http.post("api/emailautomation/get-listing-agent-categories").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, addContact: function (details) { var d = $q.defer(); return $http.post("api/emailautomation/add-contact", details).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, addListAgentContact: function (details) { var d = $q.defer(); return $http.post("api/emailautomation/add-agent-contact", details).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, addCategory: function (name, list) { var d = $q.defer(); return $http.post("api/emailautomation/add-category", { name: name, list: list }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, addTemplate: function (details) { var d = $q.defer(); return $http.post("api/emailautomation/add-template", details).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getPropertyDetails: function (properties) { var d = $q.defer(); return $http.post("api/emailautomation/get-property-details", { properties: properties }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getPropertyDetailsListingAgent: function (properties) { var d = $q.defer(); return $http.post("api/emailautomation/get-property-details-listing-agent", { properties: properties }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getEmailCustomVariable: function (var_type = null) { var d = $q.defer(); return $http.post("api/emailautomation/get-email-custom-variable", { var_type: var_type }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise } } }) }(), function () { "use strict"; var __EmailEventLogService = function ($q, $http) { return { getAllCampaign: function () { var d = $q.defer(); return $http.post("/api/email-event-log/campaigns").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise } } }; __EmailEventLogService.$inject = ["$q", "$http"], appService.service("EmailEventLogService", __EmailEventLogService) }(), function () { "use strict"; var __UtilityService = function ($q, $http, ngDialog, $sce) { return { starInitialisation: function () { for (var xSeed, ySeed, i = 0; i < 10; i++)$(".congrats-success").append('<div class="blob fa fa-star ' + i + '"></div>'); xSeed = _.random(350, 380), ySeed = _.random(120, 170), $.each($(".blob"), function (i) { var $blob = $(this), speed = _.random(1, 3), rotation = _.random(5, 100), scale = _.random(.8, 10), x = _.random(-xSeed, xSeed), y = _.random(-ySeed, ySeed); TweenMax.to($blob, speed, { x: x, y: y, ease: Power1.easeOut, opacity: 0, rotation: rotation, scale: scale, onStartParams: [$blob], onStart: function ($element) { $element.css("display", "block") }, onCompleteParams: [$blob], onComplete: function ($element) { $element.css("display", "none") } }) }) }, propertySlider: function () { angular.element(document).ready(function () { var all_slider = $(".lightbox-slide"); all_slider.on("initialized.owl.carousel", function (event) { setTimeout(function () { all_slider.animate({ opacity: 1 }, 800), $(".gallery-area .slider-placeholder").remove() }, 800) }), $(".lightbox-slide").on("resized.owl.carousel", function (event) { var $this = $(this); $this.find(".owl-height").css("height", $this.find(".owl-item.active").height()) }); var popupRightWidth = $(".lightbox-right").innerWidth(); function popupResize() { var popupWidth = getPopupWidth() - 60; if ($(".lightbox-popup").css("width", popupWidth), $(".lightbox-right").length > 0) { var popupRightWidth = $(".lightbox-right").innerWidth(); $(".lightbox-left").css("width", popupWidth - popupRightWidth), $(".gallery-inner").css("width", popupWidth - popupRightWidth - 40), $(".lightbox-right").addClass("in"), $(".lightbox-left .lightbox-close").removeClass("show"), Modernizr.mq("(max-width: 1199px)") && ($(".expand-icon").removeClass("compress"), $(".popup-inner").removeClass("pop-expand")), Modernizr.mq("(max-width: 1024px)") && ($(".lightbox-left").css("width", "100%"), $(".lightbox-right").removeClass("in"), $(".gallery-inner").css("width", "100%"), $(".expand-icon").addClass("compress"), $(".lightbox-left .lightbox-close").addClass("show")) } else $(".lightbox-left").css("width", "100%"), $(".gallery-inner").css("width", "100%"), $(".lightbox-left .lightbox-close").addClass("show") } function getPopupWidth() { return Math.max($(window).width(), $(window).innerWidth()) } $(".popup-trigger").on("click", function () { $("#lightbox-popup-main").addClass("active").addClass("in"), $(".cont header").css("z-index", 0), $(".btn.property-btn").css("z-index", 0), $("#toTop").css("z-index", 0), $("body").css("overflow", "hidden"), $(".action-bar").removeClass("fix-action-bar"), $("#intercom-container").css("z-index", "0") }), $(".lightbox-close").on("click", function () { $("#lightbox-popup-main").removeClass("active").removeClass("in"), $(".popup-trigger").removeClass("active").removeClass("in"), $(".cont header").css("z-index", 160), $(".btn.property-btn").css("z-index", 160), $("#toTop").css("z-index", 1e4), $("body").css("overflow", "auto"), $(".action-bar").addClass("fix-action-bar"), $("#intercom-container").css("z-index", "2147483647") }), $(document).keydown(function (e) { 27 == e.keyCode && $("#lightbox-popup-main").removeClass("active").removeClass("in") }), popupResize(), $(".lightbox-expand").on("click", function () { $(".lightbox-left .lightbox-close").toggleClass("show"); var popupWidth = getPopupWidth(), popWidthTotal = getPopupWidth() - 60 - popupRightWidth; popupWidth >= 1024 && ($(this).hasClass("compress") ? ($(".lightbox-right").addClass("in"), $(".lightbox-left").css("width", popWidthTotal), $(this).removeClass("compress"), $(".popup-inner").removeClass("pop-expand")) : ($(".lightbox-left").css("width", "100%"), $(".lightbox-right").removeClass("in"), $(this).addClass("compress"), $(".popup-inner").addClass("pop-expand"))), popupWidth <= 1024 && ($(this).hasClass("compress") ? ($(".lightbox-right").addClass("in"), $(".lightbox-left").css("width", popWidthTotal), $(this).removeClass("compress")) : ($(".lightbox-left").css("width", "100%"), $(".lightbox-right").removeClass("in"), $(this).addClass("compress"))), popupWidth < 768 && $(".lightbox-left").css("width", "100%") }), $(document).ready(function () { $(".lightbox-slide").show(function () { $(".lightbox-slide").owlCarousel({ autoPlay: 3e3, rtl: !1, dots: !1, items: 1, smartSpeed: 700, autoplay: !1, slideBy: 1, nav: !1, stopOnHover: !0, autoHeight: !0, navText: ["<i class='fa fa-angle-left'></i>", "<i class='fa fa-angle-right'></i>"], responsive: { 768: { nav: !0 } } }) }), $(".lightbox-arrow-left").on("click", function () { $(".lightbox-slide").trigger("prev.owl.carousel", [1e3]) }), $(".lightbox-arrow-right").on("click", function () { $(".lightbox-slide").trigger("next.owl.carousel", [1e3]) }), $(document).keydown(function (e) { 37 == e.keyCode ? $(".lightbox-slide").trigger("prev.owl.carousel", [1e3]) : 39 == e.keyCode && $(".lightbox-slide").trigger("next.owl.carousel", [1e3]) }), popupResize() }), $(window).on("resize", function () { popupResize() }), $(document).ready(function () { $(".tagcloud a").removeAttr("style") }), $(".detail-slider").slick({ speed: 500, autoplay: !1, autoplaySpeed: 4e3, rtl: !1, slidesToShow: 1, slidesToScroll: 1, arrows: !0, asNavFor: ".slider-thumbs" }), $(".slider-thumbs").slick({ speed: 500, autoplay: !1, autoplaySpeed: 4e3, rtl: !1, slidesToShow: 8, slidesToScroll: 1, asNavFor: ".detail-slider", arrows: !1, dots: !1, centerMode: !0, focusOnSelect: !0 }) }) }, convertTimeInUnits: function (time) { return time < 60 ? time + " seconds ago" : time >= 60 && time < 3600 ? Math.floor(time / 60) + " minutes ago" : time >= 3600 && time < 86400 ? Math.floor(time / 3600) + " hours ago" : Math.floor(time / 86400) + " days ago" }, showTooltipOnHover: function () { $(document).on("mouseenter", '[data-toggle="tooltip"]', function () { $(this).tooltip("show") }) }, getTrustedUrl: function (src) { return $sce.trustAsResourceUrl(src) }, hasObjectNull: function (target) { for (var member in target) if (null == target[member] || "" == target[member] || void 0 == target[member]) return !0; return !1 }, compareDates: function (date1, date2) { return date1 > date2 ? "d1" : date1 < date2 ? "d2" : "equal" }, getDateFromDT: function (dt) { let newDate = new Date(dt), date = newDate.getDate(), month = newDate.getMonth() + 1, year = newDate.getFullYear(); return date = date < 10 ? "0" + date : date, year + "-" + (month = month < 10 ? "0" + month : month) + "-" + date }, getMonthAsString: function (date) { return ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"][new Date(date).getMonth()] }, getFullYear: function (date) { return new Date(date).getFullYear() }, scrollBySelector: function (id) { $("html, body").animate({ scrollTop: $(id).offset().top }, 1500) } } }; __UtilityService.$inject = ["$q", "$http", "ngDialog", "$sce"], appService.service("UtilityService", __UtilityService) }(), function () { "use strict"; var __PricingService = function ($q, $http, $filter, $state, AuthService) { return { getPlan: function (dataObj) { var d = $q.defer(); return $http.post("api/pricing/getPlan", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getOfferDiscount: function (cycle, obj, userData) { var discount; return userData && userData.couponId && ("Agent" === userData.role && "agentpricing" === $state.current.name || "Buyer" === userData.role && "buyerpricing" === $state.current.name || !userData.role) ? discount = userData.couponDiscountPrice : "monthly" === cycle && obj[0].is_active ? discount = obj[0].discount : "quarterly" === cycle && obj[1].is_active ? discount = obj[1].discount : "annual" === cycle && obj[2].is_active && (discount = obj[2].discount), void 0 !== discount ? discount : 0 }, getofferedPrice: function (cycle, regularPrice, obj, couponCode, userData) { var discount, finalPrice; return userData && userData.couponId && ("Agent" === userData.role && "agentpricing" === $state.current.name || "Buyer" === userData.role && "buyerpricing" === $state.current.name || !userData.role) ? discount = userData.couponDiscountPrice : "monthly" === cycle && obj[0].is_active ? discount = obj[0].discount : "quarterly" === cycle && obj[1].is_active ? discount = obj[1].discount : "annual" === cycle && obj[2].is_active && (discount = obj[2].discount), void 0 !== (discount = void 0 !== discount ? discount : 0) && (finalPrice = regularPrice - regularPrice * discount / 100, couponCode && (finalPrice -= finalPrice * couponCode / 100)), finalPrice }, newCheckout: function (dataObj) { var d = $q.defer(); return $http.get("api/pricing/newCheckout").success(function (data) { d.resolve(data) }).error(function (error) { d.reject(error) }), d.promise }, validateCouponCode: function (dataObj) { var d = $q.defer(); return $http.post("api/pricing/validatecouponcode", dataObj).success(function (data) { d.resolve(data) }).error(function (error) { d.reject(error) }), d.promise }, getUserActiveProduct: function (dataObj) { var d = $q.defer(); return $http.post("api/pricing/getuseractiveproduct", dataObj).success(function (data) { d.resolve(data) }).error(function (error) { d.reject(error) }), d.promise }, getUserSubscription: function () { var d = $q.defer(); return $http.get("api/pricing/getUserSubscription").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getUserTrialSubscription: function () { var d = $q.defer(); return $http.get("api/pricing/getUserTrialSubscription").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, newSubscription: function (dataObj) { var d = $q.defer(); return $http.post("api/pricing/newSubscription", dataObj).success(function (data) { d.resolve(data) }).error(function (error) { d.reject(error) }), d.promise }, updatePaymentMethod: function (dataObj) { var d = $q.defer(); return $http.post("api/pricing/updatePaymentMethod", dataObj).success(function (data) { d.resolve(data) }).error(function (error) { d.reject(error) }), d.promise }, checkout: function (dataObj) { var d = $q.defer(); return $http.post("api/pricing/checkout", dataObj).success(function (data) { d.resolve(data) }).error(function (error) { d.reject(error) }), d.promise }, validateCouponCodeRegister: function (dataObj) { var d = $q.defer(); return $http.post("api/pricing/validatecouponcoderegister", dataObj).success(function (data) { d.resolve(data) }).error(function (error) { d.reject(error) }), d.promise }, getInsightsOfferDiscount: function (cycle, obj, userData) { var discount; return "monthly" === cycle && obj[0].is_active ? discount = obj[0].discount : "annual" === cycle && obj[1].is_active && (discount = obj[1].discount), void 0 !== discount ? discount : 0 }, getInsightsOfferedPrice: function (cycle, regularPrice, obj, couponCode, userData) { var discount; return "monthly" === cycle && obj[0].is_active ? discount = obj[0].discount : "annual" === cycle && obj[1].is_active && (discount = obj[1].discount), discount = void 0 !== discount ? discount : 0, couponCode ? regularPrice - regularPrice * couponCode / 100 : regularPrice - regularPrice * discount / 100 }, updateSubscription: function (dataObj) { var d = $q.defer(); return $http.post("api/pricing/updateSubscription", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, retrieveSubscriptionAddons: function (dataObj) { var d = $q.defer(); return $http.post("api/pricing/retrieveSubscriptionAddons", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, insertUserGUID: function (dataObj) { var d = $q.defer(); return $http.post("api/pricing/insertUserGUID", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, retrieveHostedPage: function (dataObj) { var d = $q.defer(); return $http.post("api/pricing/retrieveHostedPage", dataObj).success(function (data) { d.resolve(data) }).error(function (error) { d.reject(error) }), d.promise }, nonLoggedInCheckout: function (dataObj) { var d = $q.defer(); return $http.post("api/pricing/nonLoggedInCheckout", dataObj).success(function (data) { d.resolve(data) }).error(function (error) { d.reject(error) }), d.promise }, updateCustomerUserId: function (dataObj) { var d = $q.defer(); return $http.post("api/pricing/updateCustomerUserId", dataObj).success(function (data) { d.resolve(data) }).error(function (error) { d.reject(error) }), d.promise }, getUserActiveSubscription: function (dataObj) { var d = $q.defer(); return $http.post("api/pricing/getUserActiveSubscription", dataObj).success(function (data) { d.resolve(data) }).error(function (error) { d.reject(error) }), d.promise }, getSubscribedPlans: function (dataObj) { let getSubscribedPlans = AuthService._getObject("subscribePlan"), activeSubscribedPlans = {}; return angular.forEach(getSubscribedPlans, function (data, key) { activeSubscribedPlans[data.plan_name] = data, delete data.plan_name }), activeSubscribedPlans } } }; __PricingService.$inject = ["$q", "$http", "$filter", "$state", "AuthService"], appService.service("PricingService", __PricingService) }(), function () { "use strict"; var __UtmService = function ($q, $http) { return { saveUserCampaignDetails: function (utmObj) { var d = $q.defer(); return $http.post("api/utmcampaign/save-uc-details", utmObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, downloadBookSendEmail: function (utmObj) { var d = $q.defer(); return $http.post("api/utmcampaign/download-book-send-mail", utmObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, downloadBook: function (utmObj) { var dataObj = { email_address: utmObj.utm_term, book_name: utmObj.utm_content }, d = $q.defer(); return $http.post("api/utmcampaign/download-ebook", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getName: function (utm_term) { return utm_term.split("+").shift() }, getEmail: function (utm_term) { return utm_term.split("+").pop() }, getObjectFromString: function (input) { for (var part, parts = input.split('"&'), record = {}, i = 0; i < parts.length; i++)(part = parts[i].split('="'))[1].indexOf('"') > -1 && (part[1] = part[1].substring(0, part[1].indexOf('"'))), record[part[0]] = part[1]; return record } } }; __UtmService.$inject = ["$q", "$http"], appService.service("UtmService", __UtmService) }(), function () { "use strict"; var __InsightService = function ($q, $http, Restangular, $rootScope) { function PMT(rate, periods, present, future, type) { if (future = future || 0, type = type || 0, anyIsError(rate = parseNumber(rate), periods = parseNumber(periods), present = parseNumber(present), future = parseNumber(future), type = parseNumber(type))) return 0; var result; if (0 === rate) result = (present + future) / periods; else { var term = Math.pow(1 + rate, periods); result = 1 === type ? (future * rate / (term - 1) + present * rate / (1 - 1 / term)) / (1 + rate) : future * rate / (term - 1) + present * rate / (1 - 1 / term) } return -result } function FV(rate, periods, payment, value, type) { if (value = value || 0, type = type || 0, anyIsError(rate = parseNumber(rate), periods = parseNumber(periods), payment = parseNumber(payment), value = parseNumber(value), type = parseNumber(type))) return 0; var result; if (0 === rate) result = value + payment * periods; else { var term = Math.pow(1 + rate, periods); result = 1 === type ? value * term + payment * (1 + rate) * (term - 1) / rate : value * term + payment * (term - 1) / rate } return -result } function parseNumber(string) { return void 0 === string || "" === string ? 0 : isNaN(string) ? 0 : parseFloat(string) } function anyIsError() { for (var n = arguments.length; n--;)if (arguments[n] instanceof Error) return !0; return !1 } var switchCalculations = function (propInfo, key, params_arr) { if ("get_percentage_added" == key) { var amt = params_arr.amount * (params_arr.percent / 100); return params_arr.amount + amt } if ("get_percentage_only" == key) return params_arr.amount * (params_arr.percent / 100); if ("get_rent_percentage" == key) { var year = Math.ceil(params_arr.current_month / 12), rent_increase_primary = propInfo.default_rent_increase_primary, rent_increase_secondary = propInfo.default_rent_increase_secondary, ret = 0; return 1 == year ? ret : --year <= 3 ? rent_increase_primary : rent_increase_secondary } if ("get_inflation_percentage" == key) { year = Math.ceil(params_arr.current_month / 12); var infaltion_primary = propInfo.default_expense_increase_primary, infaltion_secondary = propInfo.default_expense_increase_secondary; return ret = 0, 1 == year ? ret : --year <= 3 ? infaltion_primary : infaltion_secondary } if ("get_value_appreciation_percentage" == key) { year = Math.ceil(params_arr.current_month / 12); var appriciation_primary = propInfo.default_home_value_appreciation_primary, appriciation_secondary = propInfo.default_home_value_appreciation_secondary; return ret = 0, year <= 3 ? appriciation_primary : appriciation_secondary } }; return { insightMain: function (guid) { let dataObj = { guid: guid }; var d = $q.defer(); return $http.post("api/insights/insightMain", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getInsightsMain: function (guid, cb) { let dataObj = { guid: guid }; $http.post("/api/insights/insightMain", dataObj).success(res => { cb(res) }) }, submitParsedData: function (json, cb) { $http.post("/api/insights/store-parsed-data", json).success(res => { cb(res) }) }, verifyInvite: function (emailID, flag, ref) { return Restangular.all("api/insights/verify-invite").post({ email_id: emailID, flag: flag, ref: ref }) }, getUploadedBy: function (ID, cb) { $http.post("/api/insights/insights-uploader-details", { uploaded_by: ID }).success(res => { cb(res) }) }, getBorrowerDetails: function (insights_property_id, cb) { $http.post("/api/insights/insights-borrower-details", { insights_property_id: insights_property_id }).success(res => { cb(res) }) }, getEstimatedValue: function (insights_property_id, month, year, cb) { $http.post("/api/insights/insights-estimated-value", { insights_property_id: insights_property_id, month: month, year: year }).success(res => { null != res.data ? cb(res.data) : cb(res) }) }, getEstimatedRent: function (insights_property_id, month, year, cb) { $http.post("/api/insights/insights-estimated-rent", { insights_property_id: insights_property_id, month: month, year: year }).success(res => { null != res.data ? cb(res.data) : cb(res) }) }, getMortgageBalance: function (insights_property_id, cb) { $http.post("/api/insights/attom-mortgage-balance", { insights_property_id: insights_property_id }).success(res => { null != res.data ? cb(res.data) : cb(res) }) }, getPropertySales: function (insights_property_id, cb) { $http.post("/api/insights/insights-property-sales", { insights_property_id: insights_property_id }).success(res => { null != res.data ? cb(res.data) : cb(res) }) }, getAssessedValueTaxAmount: function (insights_property_id, cb) { $http.post("/api/insights/get-assessed-value", { insights_property_id: insights_property_id }).success(res => { null != res.data ? cb(res.data) : cb(res) }) }, getMktttlValueTaxAmount: function (insights_property_id, cb) { $http.post("/api/insights/get-mktttl-value", { insights_property_id: insights_property_id }).success(res => { null != res.data ? cb(res.data) : cb(res) }) }, getPropertyMortgages: function (insights_property_id, cb) { $http.post("/api/insights/attom-property-mortgages", { insights_property_id: insights_property_id }).success(res => { null != res.data ? cb(res.data) : cb(res) }) }, getCustomMortgageBalance: function (insights_property_id, cb) { $http.post("/api/insights/fetch-custom-mortgage-balance", { insights_property_id: insights_property_id }).success(res => { null != res.data ? cb(res.data) : cb(res) }) }, getTotalMortgageBalance: function (insights_property_id, cb) { $http.post("/api/insights/total-custom-mortgage-balance", { insights_property_id: insights_property_id }).success(res => { null != res.data ? cb(res.data) : cb(res) }) }, submitCustomMortgageBalence: function (json, cb) { $http.post("/api/insights/insights-custom-mortgage-balance", json).success(res => { cb(res) }) }, submitInvite: function (json, cb) { $http.post("/api/insights/insights-invite", json).success(res => { cb(res) }) }, getAllLenders: function (agentID, cb) { $http.post("/api/insights/all-lenders", { agent_id: agentID }).success(res => { null != res.data ? cb(res.data) : cb(res) }) }, getAllAgents: function (lenderID, cb) { $http.post("/api/insights/all-agents", { lender_id: lenderID }).success(res => { null != res.data ? cb(res.data) : cb(res) }) }, getLenderDetailByID: function (ID, cb) { $http.post("/api/insights/lender-details", { id: ID }).success(res => { cb(res) }) }, getAgentDetailByID: function (ID, cb) { $http.post("/api/insights/agent-details", { id: ID }).success(res => { cb(res) }) }, getInsightSettings: function (cb) { $http.post("/api/insights/get-insights-settings", { options: ["INSIGHTS_AGENT_COMMISSION_PERCENT", "INSIGHTS_EXCISE_TAX_PERCENT", "INSIGHTS_TITLE_INSURANCE_PERCENT", "ExtraPayment_Default_Term", "ExtraPayment_Default_Rate", "15_Year_Fixed_APR_Refinance_Markup", "20_Year_Fixed_APR_Refinance_Markup", "30_Year_Fixed_APR_Refinance_Markup", "15_Year_Fixed_Refinance_Markup", "20_Year_Fixed_Refinance_Markup", "30_Year_Fixed_Refinance_Markup", "Insights_Display_Save_Money_Before_Build_Wealth_Lenders", "Insights_Display_Save_Money_Before_Build_Wealth_Agents", "DEFAULT_PMI_PERCENT"] }).success(res => { cb(res) }) }, CUMIPMT: function (rate, periods, value, start, end, type) { if (anyIsError(rate = parseNumber(rate), periods = parseNumber(periods), value = parseNumber(value))) return 0; if (rate <= 0 || periods <= 0 || value <= 0) return 0; if (start < 1 || end < 1 || start > end) return 0; if (0 !== type && 1 !== type) return 0; var payment = PMT(rate, periods, value, 0, type), interest = 0; 1 === start && 0 === type && (interest = -value, start++); for (var i = start; i <= end; i++)interest += 1 === type ? FV(rate, i - 2, payment, value, 1) - payment : FV(rate, i - 1, payment, value, 0); return interest * rate }, CUMPRINC: function (rate, periods, value, start, end, type) { if (anyIsError(rate = parseNumber(rate), periods = parseNumber(periods), value = parseNumber(value))) return 0; if (rate <= 0 || periods <= 0 || value <= 0) return 0; if (start < 1 || end < 1 || start > end) return 0; if (0 !== type && 1 !== type) return 0; var payment = PMT(rate, periods, value, 0, type), principal = 0; 1 === start && (principal = 0 === type ? payment + value * rate : payment, start++); for (var i = start; i <= end; i++)principal += type > 0 ? payment - (FV(rate, i - 2, payment, value, 1) - payment) * rate : payment - FV(rate, i - 1, payment, value, 0) * rate; return principal }, getAmortizationSchedule: function (propInfo, isBiWeekly, isReInvest, extraPay) { var mortgagePaidOffmonth, mortgagePaidOff = !1, biweekly_interest = isBiWeekly ? 26 : 12; propInfo.default_reinvest_cashflow_value = isReInvest ? "yes" : "no"; var amortgage_data = [], balance = propInfo.offer_price_hold, turnover_year = propInfo.default_tenant_turnover_value; "" !== balance && 0 !== balance || (balance = propInfo.list_price); var main_offer_price = balance = parseFloat(balance); balance -= propInfo.down_payment; var periods = propInfo.mortgage_years * biweekly_interest, monthlyRate = propInfo.mortgage_interest / 100 / biweekly_interest, monthy_Payment = monthlyRate / (1 - Math.pow(1 + monthlyRate, -periods)) * balance, index = 1, rent_amount = parseFloat(propInfo.rent_high) || 0, other_income = propInfo.other_income || 0; "" !== other_income && void 0 !== other_income || (other_income = 0); for (var cum_payments = 0, cum_interest = 0, cum_principal = 0, cum_extra_pay = 0, rent_percentage = 0, value_appreciation_percent = 0, expense_inflation_percent = 0, property_tax = parseFloat(propInfo.property_tax) || 0, property_insurance = 0, hoa = parseFloat(propInfo.association_fees) || 0, property_management = parseFloat(propInfo.property_management) || 0, maintainance = parseFloat(propInfo.maintenance_cost_hold) || 0, other_expense = propInfo.other_expense ? parseFloat(propInfo.other_expense) : 0, contingency = propInfo.contingency ? parseFloat(propInfo.contingency) : 0, vacancy = 0, operating_income = 0, cash_flow = 0, cumulative_cash_flow = 0, value_appreciated = main_offer_price, yoy_appreciation = 0, yoy_cum_appreciation = 0, yoy_cum_appreciation_root = 0, cum_rent = 0, cum_vacancy = 0, cum_operating_income = 0, cum_property_tax = 0, cum_property_insurance = 0, cum_hoa = 0, cum_property_management = 0, cum_maintainance = 0, cum_total_m_expense = 0, cum_net_operating_income = 0, turnover_expenses = 0, amortizationCalc = function () { var interestForMonth = balance * monthlyRate, flag_last_emi = 0; balance < monthy_Payment ? (monthy_Payment = interestForMonth + balance, flag_last_emi = 1) : balance == monthy_Payment && (flag_last_emi = 1); var principalForMonth = monthy_Payment - interestForMonth; balance -= principalForMonth, cum_payments += monthy_Payment, cum_interest += interestForMonth, cum_principal += principalForMonth, rent_percentage = index % 12 == 1 ? switchCalculations(propInfo, "get_rent_percentage", params_arr = { current_month: index }) : 0; var params_arr = { amount: rent_amount = switchCalculations(propInfo, "get_percentage_added", params_arr = { amount: rent_amount, percent: rent_percentage }), percent: propInfo.default_vacancy }; if (vacancy = index <= 12 ? 0 : switchCalculations(propInfo, "get_percentage_only", params_arr), operating_income = rent_amount - vacancy, expense_inflation_percent = index % 12 == 1 ? switchCalculations(propInfo, "get_inflation_percentage", params_arr = { current_month: index }) : 0, property_tax = switchCalculations(propInfo, "get_percentage_added", params_arr = { amount: property_tax, percent: expense_inflation_percent }), property_insurance = switchCalculations(propInfo, "get_percentage_added", params_arr = { amount: property_insurance, percent: expense_inflation_percent }), hoa = switchCalculations(propInfo, "get_percentage_added", params_arr = { amount: hoa, percent: expense_inflation_percent }), property_management = switchCalculations(propInfo, "get_percentage_added", params_arr = { amount: property_management, percent: expense_inflation_percent }), maintainance = switchCalculations(propInfo, "get_percentage_added", params_arr = { amount: maintainance, percent: expense_inflation_percent }), index % 12 == 0) var month = 12; else month = index % 12; var total_m_expenses = property_tax + property_insurance + hoa + property_management + maintainance + other_expense + contingency + (turnover_expenses = index > 1 && 1 === month && index % (12 * turnover_year) == 1 ? .5 * rent_amount : 0), net_operating_income = operating_income - total_m_expenses; cash_flow = net_operating_income - monthy_Payment; var extra_pay = extraPay || 0; 1 == ("yes" === propInfo.default_reinvest_cashflow_value) && extraPay > 0 ? balance -= extra_pay : extra_pay = 0, cum_extra_pay += extra_pay, cumulative_cash_flow += cash_flow, value_appreciation_percent = index % 12 == 0 ? switchCalculations(propInfo, "get_value_appreciation_percentage", params_arr = { current_month: index }) : 0; var last_appriciated_value = value_appreciated; value_appreciated = switchCalculations(propInfo, "get_percentage_added", params_arr = { amount: value_appreciated, percent: value_appreciation_percent }), index % 12 == 0 ? yoy_cum_appreciation = yoy_cum_appreciation_root += yoy_appreciation = value_appreciated - last_appriciated_value : (yoy_appreciation = 0, yoy_cum_appreciation = 0), cum_rent += rent_amount, cum_vacancy += vacancy, cum_operating_income += operating_income, cum_property_tax += property_tax, cum_property_insurance += property_insurance, cum_hoa += hoa, cum_property_management += property_management, cum_maintainance += maintainance, cum_total_m_expense += total_m_expenses, cum_net_operating_income += net_operating_income; var year = Math.ceil(index / 12), year_text = ""; index % 12 == 1 ? year_text = year + " Start" : index % 12 == 0 && (year_text = year + " End"), 1 == flag_last_emi && (year_text = year + " End"), 1 == flag_last_emi && index % 12 == 1 && (year_text = year + " Start & End"); var months, message, getYear, getRemainingMonths, row_data = { index: index, month: month, year: year, year_text: year_text, cum_rent: cum_rent, cum_vacancy: cum_vacancy, cum_hoa: cum_hoa, cum_operating_income: cum_operating_income, cum_property_tax: cum_property_tax, cum_property_insurance: cum_property_insurance, cum_property_management: cum_property_management, cum_maintainance: cum_maintainance, cum_total_m_expense: cum_total_m_expense, cum_net_operating_income: cum_net_operating_income, yoy_cum_appreciation: yoy_cum_appreciation, yoy_appreciation: yoy_appreciation, value_appreciated: value_appreciated, value_appreciation_percent: value_appreciation_percent, cash_flow: cash_flow, cumulative_cash_flow: cumulative_cash_flow, net_operating_income: net_operating_income, total_m_expenses: total_m_expenses, hoa: hoa, maintainance: maintainance, property_management: property_management, expense_inflation_percent: expense_inflation_percent, property_insurance: property_insurance, property_tax: property_tax, operating_income: operating_income, vacancy: vacancy, rent_percentage: rent_percentage, rent_amount: rent_amount, other_income: other_income, cum_payments: cum_payments, cum_interest: cum_interest, cum_principal: cum_principal, cum_extra_pay: cum_extra_pay, emi: monthy_Payment, extra_pay: extra_pay, interest: interestForMonth, principal: principalForMonth, balance: balance, leasing_fee: 0, turnover_expenses: turnover_expenses }; row_data.balance < 0 && !mortgagePaidOff && (mortgagePaidOff = !0, mortgagePaidOffmonth = 12 * propInfo.mortgage_years - index, $rootScope.loanCompletedMonthMessage = (message = "", getYear = (months = mortgagePaidOffmonth) / 12, getRemainingMonths = months % 12, (getYear = parseInt(getYear)) > 0 && (message = getYear + " yr(s)"), getRemainingMonths > 0 && (message = message + (0 != getYear ? ", " : "") + getRemainingMonths + " months"), message)), amortgage_data.push(row_data), index++ }, i = 0; i < periods; i++)amortizationCalc(); return amortgage_data }, getTotalSavings: function (propInfo, amortgage_data, extraPay) { var loan_term, original_principal, balance, periods, monthlyRate, monthy_Payment, interest = 0, principal = 0, extra_pay = extraPay = parseInt(extraPay); loan_term = propInfo.mortgage_years, original_principal = propInfo.offer_price_hold * (100 - propInfo.default_down_payment) / 100, "" !== (balance = propInfo.offer_price_hold) && 0 !== balance || (balance = propInfo.list_price), balance = parseFloat(balance), balance -= propInfo.down_payment, periods = 12 * loan_term, monthy_Payment = (monthlyRate = propInfo.mortgage_interest / 100 / 12) / (1 - Math.pow(1 + monthlyRate, -periods)) * balance; for (var i = 1; i <= amortgage_data.length; i++)interest += amortgage_data[i - 1].interest, principal += amortgage_data[i - 1].principal, extra_pay += amortgage_data[i - 1].extra_pay; return (12 * loan_term * monthy_Payment - original_principal - (interest + principal + extra_pay - (principal + extra_pay))).toFixed(0) }, getInsightsQuestions: function (id, cb) { $http.post("/api/insights/get-insights-questions", { id: id }).success(res => { null != res.data ? cb(res.data) : cb([]) }) }, raiseAQuestion: function (json, cb) { $http.post("/api/insights/ask-insights-questions", json).success(res => { cb(res) }) }, verifyThisSteps: function (Data, cb) { $http.post("/api/insights/verify-this-steps", Data).success(res => { cb(res) }) }, checkIsItVerified: function (Data, cb) { $http.post("/api/insights/is-it-verified", Data).success(res => { cb(res) }) }, getContactCountByUploader: function (Data, cb) { $http.post("/api/insights/contacts-count-by-uploader", Data).success(res => { cb(res) }) }, getInvite: function (guid) { let dataObj = { guid: guid }; var d = $q.defer(); return $http.post("api/insights/get-invite", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getLead: function (guid) { let dataObj = { guid: guid }; var d = $q.defer(); return $http.post("api/insights/get-lead", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, submitLeadForm: function (json, cb) { $http.post("/api/insights/register-lead", json).success(res => { cb(res) }) }, acceptInviteForm: function (json, cb) { $http.post("/api/insights/accept-invite", json).success(res => { cb(res) }) }, getMortgageBalanceByType: function (insights_property_id, mortgage_type, cb) { $http.post("/api/insights/mortgage-balance-by-type", { insights_property_id: insights_property_id, mortgage_type: mortgage_type }).success(res => { null != res.data ? cb(res.data) : cb(res) }) }, getPropertyDetails: function (id, flag, insights_property_id, cb) { $http.post("/api/insights/property-details", { id: id, flag: flag, insights_property_id: insights_property_id }).success(res => { null != res.data ? cb(res.data) : cb(res) }) }, getSalesDetails: function (id, cb) { $http.post("/api/insights/mls-property-sales-data", { id: id }).success(res => { null != res.data ? cb(res.data) : cb(res) }) }, checkEmailSubscription: function (guid) { return Restangular.all("api/insights/check-email-subscription").post({ guid: guid }) }, getMLSPropertyDetails: function (json, cb) { $http.post("/api/insights/mls-properties", json).success(res => { cb(res) }) }, subscribe: function (subscription_id, cb) { $http.post("/api/insights/subscribe", { subscription_id: subscription_id }).success(res => { null != res.data ? cb(res.data) : cb(res) }) }, unSubscribe: function (unsubscriber, cb) { $http.post("/api/insights/un-subscribe", { unsubscriber: unsubscriber }).success(res => { null != res.data ? cb(res.data) : cb(res) }) }, PMT: PMT, getExtras: function () { var d = $q.defer(); return $http.get("api/insights/get-extra").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, saveSIReports: function (obj) { let dataObj = { guid: obj.guid, user_type: obj.user_type, ip_address: obj.ip_address }; var d = $q.defer(); return $http.post("api/insights/save_sireports", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, deleteLoan: function (json, cb) { $http.post("/api/insights/delete-loan", json).success(res => { cb(res) }) }, getSIDashboardReportGenerated: function (user_id, month, year, mapping_ids) { var d = $q.defer(); return $http.post("api/insights/si-report-generated-count", { user_id: user_id, month: month, year: year, mapping_ids: mapping_ids }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getSIDashboardEquity: function (user_id, mapping_ids) { var d = $q.defer(); return $http.post("api/insights/get-equity-count", { user_id: user_id, mapping_ids: mapping_ids }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getSIDashboardRefinance: function (user_id, mapping_ids) { var d = $q.defer(); return $http.post("api/insights/si-refinance-count", { user_id: user_id, mapping_ids: mapping_ids }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getSIDashboardReportIssue: function (user_id, mapping_ids) { var d = $q.defer(); return $http.post("api/insights/si-report-issue-count", { user_id: user_id, mapping_ids: mapping_ids }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getSIDashboardEmailsSent: function (user_id, mapping_ids) { var d = $q.defer(); return $http.post("api/insights/si-emails-sent-count", { user_id: user_id, mapping_ids: mapping_ids }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getSIDashboardEmailsOpened: function (user_id, mapping_ids) { var d = $q.defer(); return $http.post("api/insights/si-emails-opened-count", { user_id: user_id, mapping_ids: mapping_ids }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getSIDashboardReportViews: function (user_id, mapping_ids) { var d = $q.defer(); return $http.post("api/insights/si-report-views-count", { user_id: user_id, mapping_ids: mapping_ids }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getSIDashboardCMARequests: function (user_id, mapping_ids) { var d = $q.defer(); return $http.post("api/insights/si-cma-requests-count", { user_id: user_id, mapping_ids: mapping_ids }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getAgentLenderDropDown: function (cb) { $http.post("/api/insights/lender-agent-drop-down", {}).success(res => { res.success, cb(res) }) }, getClientFilterDropDown: function (user_id, mapping_ids, cb) { $http.post("/api/insights/get-client-list-filter", { user_id: user_id, mapping_ids: mapping_ids }).success(res => { res.success, cb(res) }) }, getMortgageFannieMae: function (orgination_date) { var d = $q.defer(); return $http.post("api/insights/get-mortgage-fannie-mae", { orgination_date: orgination_date }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getMortgageBalanceCount: function (insights_property_id, record_status) { let dataObj = { insights_property_id: insights_property_id, record_status: record_status }; var d = $q.defer(); return $http.post("api/insights/mortgage-balance-count", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getInsightsIssues: function (guid) { let dataObj = { guid: guid }; var d = $q.defer(); return $http.post("api/insights/insights-issues", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getPreviousIssue: function (guid) { let dataObj = { guid: guid }; var d = $q.defer(); return $http.post("api/insights/get-previous-issue", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, submitInsightsIssues: function (data) { let dataObj = { issuesData: data.insertData, issueId: data.issueId }; var d = $q.defer(); return $http.post("api/insights/submit-issues", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getInsightsAllIssues: function (guid) { let dataObj = { guid: guid }; var d = $q.defer(); return $http.post("api/insights/get-insights-all-issues", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getViewReportHistory: function (options, cb) { $http.post("/api/insights/view-history-by-user", options).success(res => { cb(res) }) }, fetchAgentOrLenderIds: function (isAgent, isLender, user_id, cb) { isAgent && $http.post("/api/insights/get-lender-id", { user_id: user_id }).success(res => { cb(res) }), isLender && $http.post("/api/insights/get-agent-id", { user_id: user_id }).success(res => { cb(res) }) }, getEmailIssues: function (user_id) { var d = $q.defer(); return $http.post("api/insights/get-email-issues", { user_id: user_id }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getEmailUnsubscribed: function (user_id) { var d = $q.defer(); return $http.post("api/insights/get-email-unsubscribed", { user_id: user_id }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, saveHomeValue: function (insights_property_id, home_value, user_id, vl_id) { var d = $q.defer(); return $http.post("api/insights/save-home-value", { insights_property_id: insights_property_id, home_value: home_value, user_id: user_id, vl_id: vl_id }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, updateEstPrice: function (insights_property_id, home_value, low_est, high_est, user_id) { var d = $q.defer(); return $http.post("api/insights/update-home-value", { insights_property_id: insights_property_id, home_value: home_value, low_est: low_est, high_est: high_est, user_id: user_id }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getInsightMainsData: function (guid, cb) { let dataObj = { guid: guid }; $http.post("/api/insights/get-insight-mains-data", dataObj).success(res => { cb(res) }) }, getGUID: function () { var d = $q.defer(); return $http.get("api/leadgeneration/get-lead-generation").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, generateShortUrl: function (dataObj) { var d = $q.defer(); return $http.post("api/leadgeneration/generate-short-url", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, updateShareableLink: function (dataObj) { var d = $q.defer(); return $http.post("api/leadgeneration/update-shareable-link", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, submitAddHomeForm: function (json, cb) { $http.post("/api/insights/register-home", json).success(res => { cb(res) }) }, getContactDetails: function (id, cb) { var d = $q.defer(); return $http.get("/api/insights/get-contact-addresses/" + id).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getDefaultOriginationDate: function (dataObj) { var d = $q.defer(); return $http.post("api/insights/get-default-origination-date", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, submitOnwerHomeValue: function (json, cb) { $http.post("/api/insights/owner-home-value", json).success(res => { cb(res) }) }, submitPropertyDetails: function (json, cb) { $http.post("/api/insights/owner-property-details", json).success(res => { cb(res) }) }, getOldEstimatedValue: function (insights_property_id, month, year, cb) { $http.post("/api/insights/insights-old-estimated-value", { insights_property_id: insights_property_id, month: month, year: year }).success(res => { null != res.data ? cb(res.data) : cb(res) }) }, getHomeValueOwnerDetails: function (insights_property_id, cb) { $http.post("/api/insights/insights-home-value-owner-details", { insights_property_id: insights_property_id }).success(res => { null != res.data ? cb(res.data) : cb(res) }) }, getAllMortgageType: function (guid, status, insights_property_id) { let dataObj = { guid: guid, status: status, insights_property_id: insights_property_id }; var d = $q.defer(); return $http.post("api/insights/get-all-mortgage-type", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, submitParsedInviteData: function (json, cb) { $http.post("/api/insights/store-parsed-invite-data", json).success(res => { cb(res) }) }, getPrimaryOwner: function (id, cb) { var d = $q.defer(); return $http.get("/api/insights/get-primary-owner/" + id).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, saveUsersTargetRate: function (fields) { var d = $q.defer(); return $http.post("api/insights/save-user-target-rate", fields).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, RATE: function (periods, payment, present, future, type, guess) { guess = void 0 === guess ? .01 : guess, future = void 0 === future ? 0 : future, type = void 0 === type ? 0 : type; var y0, y1, x0, x1 = 0, f = 0, i = 0, rate = guess; for (Math.abs(rate) < 1e-10 || (f = Math.exp(periods * Math.log(1 + rate))), y0 = present + payment * periods + future, y1 = present * f + payment * (1 / rate + type) * (f - 1) + future, i = x0 = 0, x1 = rate; Math.abs(y0 - y1) > 1e-10 && i < 10;)rate = (y1 * x0 - y0 * x1) / (y1 - y0), x0 = x1, x1 = rate, y0 = y1, y1 = Math.abs(rate) < 1e-10 ? present * (1 + periods * rate) + payment * (1 + rate * type) * periods + future : present * (f = Math.exp(periods * Math.log(1 + rate))) + payment * (1 / rate + type) * (f - 1) + future, ++i; return rate }, getLoanDetialsByPropertyId: function (dataObj) { var d = $q.defer(); return $http.post("api/insights/get-loan-details-by-property", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, setGlobalTargetRate: function (fields) { var d = $q.defer(); return $http.post("api/insights/set-global-target-rate", fields).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getTargetAprGuid: function (guid) { let dataObj = { guid: guid }; var d = $q.defer(); return $http.post("api/insights/get-target-rates-guid", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, sendTargetRateEmail: function (json, cb) { $http.post("/api/insights/insights-target-rate", json).success(res => { cb(res) }) }, storePMI: function (pmiData) { var d = $q.defer(); return $http.post("api/insights/store-pmi", pmiData).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getUserSavedTarget: function (id, loan_type) { let dataObj = { insights_property_id: id, loan_type: loan_type }; var d = $q.defer(); return $http.post("api/insights/get-user-saved-target", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getHomeownerTarget: function (id, term, loan_type) { let dataObj = { insights_property_id: id, term: term, loan_type: loan_type }; var d = $q.defer(); return $http.post("api/insights/get-user-saved-target-details", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, saveLoTargetRate: function (fields) { var d = $q.defer(); return $http.post("api/insights/save-lo-target-rate", fields).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, saveAssumedMortgageModel: function (fields) { var d = $q.defer(); return $http.post("api/insights/create-new-mortgage-model", fields).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, saveModelingAssumptionData: function (fields) { var d = $q.defer(); return $http.post("api/insights/save-modeling-assumptions-data", fields).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, estimateRate: function (loanAmount, term, monthlyPayment) { if (monthlyPayment < 0 || loanAmount < 0 || term < 0) return 0; var totalPayments = term, q = Math.log(1 + 1 / totalPayments) / Math.log(2); return 1200 * (Math.pow(Math.pow(1 + monthlyPayment / loanAmount, 1 / q) - 1, q) - 1) }, getSIDashboardPropertyInvestmentLogs: function (user_id, mapping_ids) { var d = $q.defer(); return $http.post("api/insights/si-property-investment-log-count", { user_id: user_id, mapping_ids: mapping_ids }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getSIDashboardBuilPortfolioLogs: function (user_id, mapping_ids) { var d = $q.defer(); return $http.post("api/insights/si-buildPortfolio-log-count", { user_id: user_id, mapping_ids: mapping_ids }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getSIDashboardRentBuyNewHomeLogs: function (user_id, mapping_ids) { var d = $q.defer(); return $http.post("api/insights/si-rent-buynew-log-count", { user_id: user_id, mapping_ids: mapping_ids }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getSIDashboardLookingForSellLogs: function (user_id, mapping_ids) { var d = $q.defer(); return $http.post("api/insights/si-lookingForSell-log-count", { user_id: user_id, mapping_ids: mapping_ids }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getRecommendationByInsightProperty: function (propertyId) { var d = $q.defer(); return $http.post("api/smartportfoliosystem/get-recommendations-by-insights_property_id", { insights_property_id: propertyId }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, saveARecommendation: function (fields) { var d = $q.defer(); return $http.post("api/smartportfoliosystem/save-recommendation", fields).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getRecommendationListByUserID: function (userID, cb) { $http.post("/api/smartportfoliosystem/get-recommendations-list-by-user-id", { user_id: userID }).success(res => { null != res.data ? cb(res.data) : cb([]) }) }, sendRecommendationEmailFromAdvisor: function (json, cb) { $http.post("/api/insights/send-recommendation-email", json).success(res => { cb(res) }) }, saveOwnerInputs: function (fields) { var d = $q.defer(); return $http.post("api/insights/save-owner-inputs", fields).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getApiKey: function () { var d = $q.defer(); return $http.get("api/insights/api-key").success(d.resolve).error(d.reject), d.promise }, regenerateApiKey: function () { var d = $q.defer(); return $http.post("api/insights/regenerate-api-key").success(d.resolve).error(d.reject), d.promise } } }; __InsightService.$inject = ["$q", "$http", "Restangular", "$rootScope"], appService.service("InsightService", __InsightService) }(), function () { "use strict"; var __AgentLeadGenerationService = function ($q, $http) { return { getAgentDatails: function (dataObj) { var d = $q.defer(); return $http.post("api/agentsleadgeneration/search-agent", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, test: function (dataObj) { var d = $q.defer(); return $http.get("api/agentsleadgeneration/", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getOtpSettings: function (dataObj) { const d = $q.defer(); return $http.get("api/agentsleadgeneration/otp-settings").success(d.resolve).error(d.reject), d.promise }, sendOtpEmail: function (body) { const d = $q.defer(); return $http.post("api/agentsleadgeneration/send-otp-email", body).success(d.resolve).error(d.reject), d.promise }, validateOtp: function (body) { const d = $q.defer(); return $http.post("api/agentsleadgeneration/validate-otp", body).success(d.resolve).error(d.reject), d.promise } } }; __AgentLeadGenerationService.$inject = ["$q", "$http"], appService.service("AgentLeadGenerationService", __AgentLeadGenerationService) }(), function () { "use strict"; var __SearchFilterService = function ($location) { return { sqft: [{ id: "500", label: "500" }, { id: "750", label: "750" }, { id: "1000", label: "1,000" }, { id: "1250", label: "1,250" }, { id: "1500", label: "1,500" }, { id: "1750", label: "1,750" }, { id: "2000", label: "2,000" }, { id: "2250", label: "2,250" }, { id: "2500", label: "2,500" }, { id: "2750", label: "2,750" }, { id: "3000", label: "3,000" }, { id: "3500", label: "3,500" }, { id: "4000", label: "4,000" }, { id: "5000", label: "5,000" }, { id: "7500", label: "7,500" }], hoa: [{ id: "25", label: "$25/month" }, { id: "50", label: "$50/month" }, { id: "75", label: "$75/month" }, { id: "100", label: "$100/month" }, { id: "150", label: "$150/month" }, { id: "200", label: "$200/month" }, { id: "250", label: "$250/month" }, { id: "300", label: "$300/month" }, { id: "400", label: "$400/month" }, { id: "500", label: "$500/month" }, { id: "600", label: "$600/month" }, { id: "700", label: "$700/month" }, { id: "800", label: "$800/month" }, { id: "900", label: "$900/month" }, { id: "1000", label: "$1000/month" }], budget: [{ id: "50000", label: "$50k" }, { id: "75000", label: "$75k" }, { id: "100000", label: "$100k" }, { id: "125000", label: "$125k" }, { id: "150000", label: "$150k" }, { id: "175000", label: "$175k" }, { id: "200000", label: "$200k" }, { id: "225000", label: "$225k" }, { id: "250000", label: "$250k" }, { id: "275000", label: "$275k" }, { id: "300000", label: "$300k" }, { id: "325000", label: "$325k" }, { id: "350000", label: "$350k" }, { id: "375000", label: "$375k" }, { id: "400000", label: "$400k" }, { id: "425000", label: "$425k" }, { id: "450000", label: "$450k" }, { id: "475000", label: "$475k" }, { id: "500000", label: "$500k" }, { id: "550000", label: "$550k" }, { id: "600000", label: "$600k" }, { id: "650000", label: "$650k" }, { id: "700000", label: "$700k" }, { id: "750000", label: "$750k" }, { id: "800000", label: "$800k" }, { id: "850000", label: "$850k" }, { id: "900000", label: "$900k" }, { id: "950000", label: "$950k" }, { id: "1000000", label: "$1M" }, { id: "1250000", label: "$1.25M" }, { id: "1500000", label: "$1.5M" }, { id: "1750000", label: "$1.75M" }, { id: "2000000", label: "$2M" }, { id: "2250000", label: "$2.25M" }, { id: "2500000", label: "$2.5M" }, { id: "2750000", label: "$2.75M" }, { id: "3000000", label: "$3M" }, { id: "3250000", label: "$3.25M" }, { id: "3500000", label: "$3.5M" }, { id: "3750000", label: "$3.75M" }, { id: "4000000", label: "$4M" }, { id: "4250000", label: "$4.25M" }, { id: "4500000", label: "$4.5M" }, { id: "4750000", label: "$4.75M" }, { id: "5000000", label: "$5M" }, { id: "6000000", label: "$6M" }, { id: "7000000", label: "$7M" }, { id: "8000000", label: "$8M" }, { id: "9000000", label: "$9M" }, { id: "10000000", label: "$10M" }], property_type: [{ id: "single_family", label: "Single Family", image: "https://dci3mufvy7x4p.cloudfront.net/images/Icons/singlefamily.svg" }, { id: "townhouse", label: "Townhouse", image: "https://dci3mufvy7x4p.cloudfront.net/images/Icons/townhouse.svg" }, { id: "multi_family", label: "Multi-Family", image: "https://dci3mufvy7x4p.cloudfront.net/images/Icons/multihome.svg" }, { id: "condo", label: "Condo", image: "https://dci3mufvy7x4p.cloudfront.net/images/Icons/condo.svg" }], beds: [{ id: "0", label: "Studio" }, { id: "1", label: "1" }, { id: "2", label: "2" }, { id: "3", label: "3" }, { id: "4", label: "4" }, { id: "4+", label: "4+" }], baths: [{ id: "0", label: "0" }, { id: "1", label: "1+" }, { id: "1.5", label: "1.5+" }, { id: "2", label: "2+" }, { id: "3", label: "3+" }, { id: "4", label: "4+" }, { id: "5", label: "5+" }, { id: "6", label: "6+" }], parking: [{ id: "1", label: "1+" }, { id: "2", label: "2+" }, { id: "3", label: "3+" }, { id: "4", label: "4+" }, { id: "5", label: "5+" }], status: [{ id: "1", label: "Active listings" }, { id: "2", label: "Active + under contract/pending" }, { id: "3", label: "Only under contract/pending" }], tos: [{ id: "1", label: "New listings" }, { id: "3", label: "Less than 3 days" }, { id: "7", label: "Less than 7 days" }, { id: "14", label: "Less than 14 days" }, { id: "30", label: "Less than 30 days" }, { id: "-7", label: "More than 7 days" }, { id: "-14", label: "More than 14 days" }, { id: "-30", label: "More than 30 days" }, { id: "-45", label: "More than 45 days" }, { id: "-60", label: "More than 60 days" }, { id: "-90", label: "More than 90 days" }, { id: "-180", label: "More than 180 days" }], priceReduced: [{ id: "-1", label: "In the last day" }, { id: "-3", label: "In the last 3 days" }, { id: "-7", label: "In the last 7 days" }, { id: "-14", label: "In the last 14 days" }, { id: "-30", label: "In the last 30 days" }, { id: "30", label: "More than 30 days" }, { id: "60", label: "More than 60 days" }, { id: "120", label: "More than 120 days" }], terms: [{ id: "A", label: "Assumable" }, { id: "B", label: "Cash Out" }, { id: "C", label: "Conventional" }, { id: "D", label: "Farm Home Loan" }, { id: "E", label: "FHA" }, { id: "F", label: "Lease/Purchase" }, { id: "G", label: "Owner Financing" }, { id: "H", label: "Rehab Loan" }, { id: "I", label: "SBA" }, { id: "J", label: "See Remarks" }, { id: "K", label: "State Bond" }, { id: "L", label: "USDA" }, { id: "M", label: "VA" }, { id: "N", label: "Variable Price Lstg" }], hotDeals: [{ id: "hold", label: "Hot Hold" }, { id: "flip", label: "Hot Flip" }, { id: "both", label: "Both" }], building_conditions: [{ id: "A:Average", label: "Average" }, { id: "B:Fair", label: "Fair" }, { id: "C:Fixer", label: "Fixer" }, { id: "D:Good", label: "Good" }, { id: "E:Remodeled", label: "Remodeled" }, { id: "F:Restored", label: "Restored" }, { id: "G:Under Construction", label: "Under Construction" }, { id: "H:Very Good", label: "Very Good" }], funding_source: [{ id: "mortage25", label: "Mortgage - 25%" }, { id: "allcash", label: "All Cash" }, { id: "sdira", label: "SDIRA" }], operators: ["=", "<", "<=", ">", ">="], logical_operators: ["OR", "AND"], dateConfig: { timePicker: !1, locale: { format: "MM-DD-YYYY" }, drops: "up", opens: "right" }, sort: { list_date: "List Date", status_change_date: "Status Change Date", "pCust.coc": "CoC%", "pCust.cap_rate": "Cap Rate%", "pCust.cash_flow": "Cash Flow", "pCust.profit_or_loss": "Net Profit", "pCust.roi": "ROI%", list_price: "Price", community_name: "Community", city_name: "City", school_district: "School District", "list_price/square_foot": "$/Sq. Ft." } } }; __SearchFilterService.$inject = ["$location"], appService.service("SearchFilterService", __SearchFilterService) }(), function () { "use strict"; var __AnalyticsService = function ($q, $http, $location) { return { submitEvnetLogData: function (json) { var d = $q.defer(); return $http.post("api/general/store-event-data", json).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, pageInfo: function () { return { page: { ip: "0.0.0.0", path: "", referrer: "", search: "", title: "Analytics Academy", url: $location.absUrl(), userAgent: "" } } }, getEventBaseData: function () { var d = $q.defer(); return $http.get("../../analytics_data/event-tracker.json").success(function (data) { d.resolve(data.event_base_data) }).error(function (reason) { d.reject(reason) }), d.promise }, getClickEventData: function (eventData) { var currentDate = new Date, CurrDate2 = moment(currentDate).format("YYYY-MM-DD hh:mm:ss"); return eventData.event_date_time = CurrDate2, console.log("eventData #1: ", eventData), eventTracker.push(eventData), console.log("vm.eventTracker #2: ", vm.eventTracker), { success: !0 } }, getSubmitEvnetLogData: function (EventLogData, userIpAddress) { const userAgent = (navUserAgent = navigator.userAgent, browserName = navigator.appName, browserVersion = "" + parseFloat(navigator.appVersion), parseInt(navigator.appVersion, 10), -1 != (tempVersionOffset = navUserAgent.indexOf("Opera")) ? (browserName = "Opera", browserVersion = navUserAgent.substring(tempVersionOffset + 6), -1 != (tempVersionOffset = navUserAgent.indexOf("Version")) && (browserVersion = navUserAgent.substring(tempVersionOffset + 8))) : -1 != (tempVersionOffset = navUserAgent.indexOf("MSIE")) ? (browserName = "Microsoft Internet Explorer", browserVersion = navUserAgent.substring(tempVersionOffset + 5)) : -1 != (tempVersionOffset = navUserAgent.indexOf("Chrome")) ? (browserName = "Chrome", browserVersion = navUserAgent.substring(tempVersionOffset + 7)) : -1 != (tempVersionOffset = navUserAgent.indexOf("Safari")) ? (browserName = "Safari", browserVersion = navUserAgent.substring(tempVersionOffset + 7), -1 != (tempVersionOffset = navUserAgent.indexOf("Version")) && (browserVersion = navUserAgent.substring(tempVersionOffset + 8))) : -1 != (tempVersionOffset = navUserAgent.indexOf("Firefox")) ? (browserName = "Firefox", browserVersion = navUserAgent.substring(tempVersionOffset + 8)) : (tempNameOffset = navUserAgent.lastIndexOf(" ") + 1) < (tempVersionOffset = navUserAgent.lastIndexOf("/")) && (browserName = navUserAgent.substring(tempNameOffset, tempVersionOffset), browserVersion = navUserAgent.substring(tempVersionOffset + 1), browserName.toLowerCase() == browserName.toUpperCase() && (browserName = navigator.appName)), -1 != (tempVersion = browserVersion.indexOf(";")) && (browserVersion = browserVersion.substring(0, tempVersion)), -1 != (tempVersion = browserVersion.indexOf(" ")) && (browserVersion = browserVersion.substring(0, tempVersion)), "BrowserName = " + browserName + " & Version = " + browserVersion); var tempNameOffset, tempVersionOffset, tempVersion, navUserAgent, browserName, browserVersion, d1 = new Date, CurrDate1 = moment(d1).format("YYYY-MM-DD hh:mm:ss"); EventLogData.event_date_time = CurrDate1; var page_info = { page: { path: $location.absUrl(), referrer: "", search: "", title: document.title, url: $location.absUrl(), userAgent: userAgent, ip: userIpAddress } }, jsonPageInfo = JSON.stringify(page_info); EventLogData.page_info = jsonPageInfo; var current_server = window.location.origin, arr1 = window.location.href.split("/"); if ("https://inbestments.com" == (current_server = arr1[0] + "//" + arr1[2]) || "https://www.inbestments.com" == current_server) { var d = $q.defer(); return $http.post("api/general/store-event-data", EventLogData).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise } return { success: !1 } }, InsertAuditHisory: function (data) { var currentDate = new Date, CurrentDateTime = moment(currentDate).format("YYYY-MM-DD hh:mm:ss"), insert_record = []; if ("insight_report_home_value" == data.column_source && ["bedroom", "bathroom", "square_foot", "purchase_price"].forEach(data1 => { var columnData = []; if ("bedroom" == data1 && void 0 !== data.bedrooms && (columnData = [{ insights_property_id: data.insights_property_id, changed_column_name: "bedroom", column_past_value: data.old_bedroom_count, column_new_value: data.bedrooms }]), "bathroom" == data1 && void 0 !== data.bathrooms && (columnData = [{ insights_property_id: data.insights_property_id, changed_column_name: "bathroom", column_past_value: data.old_bathroom_count, column_new_value: data.bathrooms }]), "square_foot" == data1 && void 0 !== data.living_square_foot && (columnData = [{ insights_property_id: data.insights_property_id, changed_column_name: "square_foot", column_past_value: data.old_sq_foot_count, column_new_value: data.living_square_foot }]), "purchase_price" == data1 && void 0 !== data.purchase_price && (columnData = [{ insights_property_id: data.insights_property_id, changed_column_name: "purchase_price", column_past_value: data.old_purchase_price, column_new_value: data.purchase_price }]), columnData.length > 0) { var AuditHistoryData = [{ insights_property_id: data.insights_property_id, table_name: data.table_name, table_primary_key_name: data.table_primary_key_name, table_primary_key_value: data.table_primary_key_value, changed_column_name: columnData[0].changed_column_name, column_past_value: columnData[0].column_past_value, column_new_value: columnData[0].column_new_value, column_source: "insight_report_home_value", is_new_record: "N", last_updated_by: data.last_updated_by, last_updated_datetime: CurrentDateTime }]; insert_record.push(AuditHistoryData) } }), insert_record.length > 0) { var d = $q.defer(); return $http.post("api/general/store-audit-history", insert_record).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise } } } }; __AnalyticsService.$inject = ["$q", "$http", "$location"], appService.service("AnalyticsService", __AnalyticsService) }(), function () { "use strict"; var __SmartOutReachAutomationService = function ($q, $http) { return { getSequenceCount: function (user_id, mapping_ids) { var d = $q.defer(); return $http.post("api/smartoutreachautomation/sequence-count", { user_id: user_id, mapping_ids: mapping_ids }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, updateSequenceStatus: function (requestBodyData, cb) { console.log(requestBodyData), $http.post("api/smartoutreachautomation/change-sequence-status", requestBodyData).success(res => { cb(res) }) }, createOrUpdateSequence: function (requestBodyData, cb) { var d = $q.defer(); return $http.post("api/smartoutreachautomation/save-sequence", requestBodyData).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, deleteSequence: function (json, cb) { $http.post("api/smartoutreachautomation/delete-sequence", json).success(res => { cb(res) }) }, getChannelsList: function (user_id, mapping_ids) { var d = $q.defer(); return $http.post("api/smartoutreachautomation/get-channels").success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, createOrUpdateStep: function (requestBodyData, cb) { var d = $q.defer(); return $http.post("api/smartoutreachautomation/save-step", requestBodyData).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getClickedLinksList: function (requestBody) { var d = $q.defer(); return $http.post("api/smartoutreachautomation/clicked-links", requestBody).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getEventList: function (requestBody) { var d = $q.defer(); return $http.post(" api/smartoutreachautomation/event-list", requestBody).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getStepsList: function (requestBody) { console.log(requestBody); var d = $q.defer(); return $http.post("api/smartoutreachautomation/step-list", requestBody).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, updateStepStatus: function (requestBodyData, cb) { console.log(requestBodyData), $http.post("/api/smartoutreachautomation/change-step-status", requestBodyData).success(res => { cb(res) }) }, deleteStep: function (json, cb) { $http.post("api/smartoutreachautomation/delete-step", json).success(res => { cb(res) }) }, saveSOAEmail: function (fields) { var d = $q.defer(); return $http.post("api/smartoutreachautomation/queue-soa-email", fields).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, addTemplate: function (details) { var d = $q.defer(); return $http.post("api/smartoutreachautomation/add-template", details).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getSequenceSeriesCount: function (requestBody) { console.log(requestBody); var d = $q.defer(); return $http.post("api/smartoutreachautomation/get-sequence-series-count", requestBody).success(function (data) { console.log(data), d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, updateSoaQueueEmail: function (fields) { var d = $q.defer(); return $http.post("api/smartoutreachautomation/queue-soa-email-update", fields).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getSOAEmailCustomVariable: function (fields) { var d = $q.defer(); return $http.post("api/smartoutreachautomation/get-email-custom-variable-soa", fields).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise } } }; __SmartOutReachAutomationService.$inject = ["$q", "$http"], appService.service("SmartOutReachAutomationService", __SmartOutReachAutomationService) }(), function () { "use strict"; var __ZiggeoService = function (ResourceService, $q, $http, CONSTANTS, $location) { let ziggeoApp; return "undefined" != typeof ZiggeoApi && function () { let config = { token: "9bb47f2fb47bb114e000e25a4896a7b8", google_analytics: !0, webrtc_on_mobile: !0, webrtc_streaming: !0, webrtc: !0, webrtc_streaming_if_necessary: !0 }, webrtc_on_mobile = !0; $location.search() && $location.search().webrtc && "false" == $location.search().webrtc && (webrtc_on_mobile = !1), config.webrtc_on_mobile = webrtc_on_mobile, ziggeoApp = new ZiggeoApi.V2.Application(config), ZiggeoApi.V2.Locale.mediaLocale.register({ "ba-videorecorder-chooser.record-video": CONSTANTS.ZIGGEO.CAMERA_LABEL }, 10), ZiggeoApi.V2.Locale.mediaLocale.register({ "ba-videorecorder-chooser.multi-stream": CONSTANTS.ZIGGEO.CAMERA_AND_SCREEN_LABEL }, 10) }(), { getZiggeoApp: function () { return ziggeoApp }, getVideoData: function (token) { return ziggeoApp.videos.get(token) }, getVideoEmailCTA: function (token) { let d = $q.defer(); return $http.get(`api/emailautomation/get-video-cta?token=${token}`).success(d.resolve).error(d.reject), d.promise }, updateVideoData: function (token, data) { let d = $q.defer(), url = "api/videos/" + token; return $http.put(url, data).success(d.resolve).error(d.reject), d.promise }, getVideos: function (query) { let d = $q.defer(), url = "api/videos?" + $.param(query); return $http.get(url).success(d.resolve).error(d.reject), d.promise }, updateVideoDataInZiggeo: function (token, data) { return ziggeoApp.videos.update(token, data) }, getVideoTokenFromKey: function (key) { let d = $q.defer(), url = `api/videos/getToken?unique_cta_key=${key}`; return $http.get(url).success(d.resolve).error(d.reject), d.promise }, saveVideoData: function (body) { var d = $q.defer(); return $http.post("api/videos/saveVideoData", body).success(d.resolve).error(d.reject), d.promise }, getVideoSettings: function () { let d = $q.defer(); return $http.get("api/videos/settings").success(d.resolve).error(d.reject), d.promise } } }; __ZiggeoService.$inject = ["ResourceService", "$q", "$http", "CONSTANTS", "$location"], appService.service("ZiggeoService", __ZiggeoService) }(), function () { "use strict"; var __SmartPortfolioService = function ($q, $http, Restangular, $rootScope) { return { getGoals: function (contactId = null) { let dataObj = { contact_id: contactId }; var d = $q.defer(); return $http.post("/api/smartportfoliosystem/get-goals", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, createGoal: function (dataObj) { var d = $q.defer(); return $http.post("/api/smartportfoliosystem/create-goal", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, updateGoal: function (dataObj) { var d = $q.defer(); return $http.post("/api/smartportfoliosystem/update-goal", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getGoalComments: function (goal_id) { let dataObj = { goal_id: goal_id }; var d = $q.defer(); return $http.post("/api/smartportfoliosystem/get-goal-comments", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getAdvisorDetailsByPropertyID: function (propertyId = null) { let dataObj = { property_id: propertyId }; var d = $q.defer(); return $http.post("/api/user/get-advisor-details", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getAllRecommendationForPortfolio: function (propertyIds, contactId) { var d = $q.defer(); return $http.post("/api/smartportfoliosystem/get-all-recommendations-for-portfolio", { insights_property_id: propertyIds, contact_id: contactId }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getUserFund: function (userId = null) { let dataObj = { user_id: userId }; var d = $q.defer(); return $http.post("/api/smartportfoliosystem/get-user-fund", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, saveUserFund: function (dataObj) { var d = $q.defer(); return $http.post("/api/smartportfoliosystem/save-user-fund", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, updateRecommendation: function (dataObj) { var d = $q.defer(); return $http.post("/api/smartportfoliosystem/update-recommendation", dataObj).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, getPropertyListByInsightPropertyIds: function (propertyIds) { var d = $q.defer(); return $http.post("/api/smartportfoliosystem/get-portfolio-property-list", { insights_property_id: propertyIds }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, deleteGoal: function (goalId) { var d = $q.defer(); return $http.post("/api/smartportfoliosystem/delete-goal", { goal_id: goalId }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise }, deleteSubGoal: function (subGoalId) { var d = $q.defer(); return $http.post("/api/smartportfoliosystem/delete-sub-goal", { sub_goal_id: subGoalId }).success(function (data) { d.resolve(data) }).error(function (reason) { d.reject(reason) }), d.promise } } }; __SmartPortfolioService.$inject = ["$q", "$http", "Restangular", "$rootScope"], appService.service("SmartPortfolioService", __SmartPortfolioService) }();
